# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:00:23+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class AddLogRequest(BaseModel):
    message: str
    source: str


class Address(BaseModel):
    addressId: str = Field(..., description='Shipping address ID.')
    addressType: str = Field(
        ...,
        description='Type of address. For example, `Residential` or `Pickup`, among others.',
    )
    city: str = Field(..., description='City of the shipping address.')
    complement: str = Field(
        ..., description='Complement to the shipping address when it applies.'
    )
    country: str = Field(
        ...,
        description='Three letters ISO code of the country of the shipping address (ISO 3166 ALPHA-3).',
    )
    entityId: str = Field(..., description='Shipping address entity ID.')
    geoCoordinates: List[str] = Field(
        ...,
        description='Array with two numbers with geocoordinates, first longitude then latitude.',
    )
    neighborhood: str = Field(..., description='Neighborhood of the shipping address.')
    number: str = Field(
        ...,
        description='Number of the building, house or apartment in the shipping address.',
    )
    postalCode: str = Field(..., description='Postal code of the shipping address.')
    receiverName: str = Field(
        ..., description='Name of the person who is going to receive the order.'
    )
    reference: str = Field(
        ...,
        description='Complement to help locate the shipping address, in case of delivery.',
    )
    state: str = Field(..., description='State of the shipping address.')
    street: str = Field(..., description='Street of the shipping address.')
    versionId: str = Field(..., description='Shipping address version ID.')


class BRL(BaseModel):
    Count: int
    Facets: str
    Max: int
    Mean: float
    Min: int
    Missing: int
    StdDev: float
    Sum: int
    SumOfSquares: int


class BRL1(BaseModel):
    Count: int
    Facets: str
    Max: int
    Mean: float
    Min: int
    Missing: int
    StdDev: float
    Sum: int
    SumOfSquares: int


class ClientProfileData(BaseModel):
    corporateDocument: str = Field(
        ...,
        description='If the customer is a legal entity, here goes the corporate document.',
    )
    corporateName: str = Field(
        ...,
        description='If the customer is a legal entity, here goes the corporate name.',
    )
    corporatePhone: str = Field(
        ...,
        description="If the customer is a legal entity, here goes the corpany's phone number.",
    )
    customerClass: str = Field(
        ..., description='Identification of the class the customer belongs to.'
    )
    document: str = Field(
        ..., description='Document identification code informed by the customer.'
    )
    documentType: str = Field(
        ..., description='Type of the document informed by the customer.'
    )
    email: str = Field(..., description="Customer's email.")
    firstName: str = Field(..., description="Customer's first name.")
    id: str = Field(
        ..., description='Object ID, the expected value is `clientProfileData`.'
    )
    isCorporate: bool = Field(
        ...,
        description='The value is `true` when the customer is a legal entity and `false` when not.',
    )
    lastName: str = Field(..., description="Customer's last name.")
    phone: str = Field(..., description="Customers's phone number.")
    stateInscription: str = Field(
        ...,
        description='If the customer is a legal entity, here goes the state inscription.',
    )
    tradeName: str = Field(
        ..., description='If the customer is a legal entity, here goes the trade name.'
    )
    userProfileId: str = Field(..., description='Customer user profile ID.')


class CommititemfeedorderstatusRequest(BaseModel):
    handles: List[str] = Field(..., description='List of item handles to commit')


class ConfirmitemfeedorderstatusRequest(BaseModel):
    commitToken: str


class ConnectorResponses(BaseModel):
    Message: str = Field(
        ..., description="Information about the connector's responses."
    )
    ReturnCode: str = Field(..., description='Connector return code.')
    Tid: str = Field(..., description='Connector transaction ID.')
    authId: str = Field(..., description='Connector authorization ID.')


class CurrencyCode(BaseModel):
    BRL_1: BRL = Field(..., alias='BRL')


class CurrencyCode1(BaseModel):
    BRL: BRL1


class CurrencyFormatInfo(BaseModel):
    CurrencyDecimalDigits: int = Field(
        ..., description='Quantity of currency decimal digits.'
    )
    CurrencyDecimalSeparator: str = Field(
        ..., description='Defines what currency decimal separator will be applied.'
    )
    CurrencyGroupSeparator: str = Field(
        ..., description='Defines what currency group separator will be applied.'
    )
    CurrencyGroupSize: int = Field(
        ..., description='Defines how many characters will be grouped.'
    )
    StartsWithCurrencySymbol: bool = Field(
        ...,
        description='Defines if all prices will be initiated with the currency symbol (`true`) or not (`false`).',
    )


class DeliveryId(BaseModel):
    accountCarrierName: str = Field(
        ...,
        description="Name of the account's [carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE).",
    )
    courierId: str = Field(
        ...,
        description="[Carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE)'s ID.",
    )
    courierName: str = Field(..., description="Carrier's name.")
    dockId: str = Field(
        ...,
        description='ID of the [loading dock](https://help.vtex.com/pt/tutorial/doca--5DY8xHEjOLYDVL41Urd5qj).',
    )
    kitItemDetails: List = Field(
        ...,
        description='Information about [kits](https://help.vtex.com/tutorial/what-is-a-kit--5ov5s3eHM4AqAAgqWwoc28), if there are any.',
    )
    quantity: int = Field(..., description='Quantity of items.')
    warehouseId: str = Field(
        ...,
        description='ID of the [warehouse](https://help.vtex.com/tutorial/warehouse--6oIxvsVDTtGpO7y6zwhGpb).',
    )


class Dimension(BaseModel):
    cubicweight: float = Field(..., description="Item's cubic weight.")
    height: int = Field(..., description="Item's height.")
    length: int = Field(..., description="Item's length.")
    weight: int = Field(..., description="Item's weight.")
    width: int = Field(..., description="Item's width.")


class Event(BaseModel):
    city: str
    date: str
    description: str
    state: str


class ExportCompletedResponse(BaseModel):
    cancelled: bool = Field(
        ...,
        description='If the export request was cancelled (`true`) or not (`false`).',
    )
    completedDate: str = Field(..., description='Order export process completed date.')
    dateOfRequest: str = Field(..., description='Order export request date.')
    email: str = Field(..., description='Order export requester email.')
    filter: str = Field(..., description='Order export request filter.')
    hostUri: str = Field(..., description='Host URL.')
    id: str = Field(..., description='Order export request ID.')
    instanceId: str = Field(..., description='Instance ID.')
    lasUpdateTime: str = Field(..., description='Order export process update time.')
    linkToDownload: str = Field(..., description='Link to order export download.')
    publishId: str = Field(..., description='Order export publish ID.')
    query: str = Field(..., description='Order export request filter query.')
    rowNumber: int = Field(..., description='Order export total rows.')
    rowsProcessed: int = Field(..., description='Order export total processed rows.')
    startDate: str = Field(..., description='Order export process start date.')
    utcTime: str = Field(..., description='UTC time.')


class ExportInProgressResponse(BaseModel):
    cancelled: bool = Field(
        ...,
        description='If the export request was cancelled (`true`) or not (`false`).',
    )
    completedDate: str = Field(..., description='Order export process completed date.')
    dateOfRequest: str = Field(..., description='Order export request date.')
    email: str = Field(..., description='Order export requester email.')
    filter: str = Field(..., description='Order export request filter.')
    hostUri: str = Field(..., description='Host URL.')
    id: str = Field(..., description='Order export request ID.')
    instanceId: str = Field(..., description='Instance ID.')
    lasUpdateTime: str = Field(..., description='Order export process update time.')
    linkToDownload: str = Field(..., description='Link to order export download.')
    publishId: str = Field(..., description='Order export publish ID.')
    query: str = Field(..., description='Order export request filter query.')
    rowNumber: int = Field(..., description='Order export total rows.')
    rowsProcessed: int = Field(..., description='Order export total processed rows.')
    startDate: str = Field(..., description='Order export process start date.')
    utcTime: str = Field(..., description='UTC time.')


class FeedFilter(BaseModel):
    disableSingleFire: Optional[bool] = Field(
        False,
        description='Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.',
    )
    expression: Optional[str] = Field(
        None,
        description='JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is set to `FromOrders`.',
    )
    status: Optional[List[str]] = Field(
        None,
        description="List of order statuses that should be included in the feed. This should only be used in case `type` is set to `FromWorkflow`. The status event will be removed, if it can't deliver a message more than 100 times, 4 days progressively. \r\n\r\n**Status available to filter** \r\n\r\n- order-created \n\r\n- on-order-completed \n\r\n- on-order-completed-ffm \n\r\n- payment-pending \n\r\n- waiting-for-order-authorization \n\r\n- approve-payment \n\r\n- payment-approved \n\r\n- request-cancel \n\r\n- waiting-for-seller-decision \n\r\n- waiting-ffmt-authorization \n\r\n- waiting-for-authorization \n\r\n- waiting-for-manual-authorization \n\r\n- authorize-fulfillment \n\r\n- order-create-error \n\r\n- order-creation-error \n\r\n- window-to-cancel \n\r\n- window-to-change-seller \n\r\n- waiting-for-mkt-authorization \n\r\n- waiting-seller-handling \n\r\n- ready-for-handling \n\r\n- start-handling \n\r\n- handling \n\r\n- invoice-after-cancellation-deny \n\r\n- order-accepted \n\r\n- invoice \n\r\n- invoiced \n\r\n- replaced \n\r\n- cancellation-requested \n\r\n- cancel \n\r\n- canceled",
    )
    type: str = Field(
        ...,
        description='Determines what orders appear in the feed and how they are filtered. There are two possible values:\n\r\n\r-`FromWorkflow`: the feed will receive order updates only when order’s statuses change and orders can be filtered by status, using the `status` field described below.\n\r\n\r-`FromOrders`: the feed gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field described below.',
    )


class From(BaseModel):
    aliasMaskType: int = Field(
        ..., description='Conversation tracker mask type.', examples=[0]
    )
    conversationRelatedTo: str = Field(
        ..., description='Related order ID.', examples=['1305371685465-01']
    )
    conversationSubject: str = Field(
        ..., description='Conversation subject.', examples=['oms']
    )
    email: str = Field(
        ..., description="Sender's email.", examples=['noreply@store.com.br']
    )
    emailAlias: str = Field(
        ...,
        description='Sender transactional tracker email.',
        examples=['64d8bd8dbe5c4e7b93b8b3c237e50be1@ct.name.com.br'],
    )
    name: str = Field(..., description="Sender's name.", examples=['no reply'])
    role: str = Field(
        ...,
        description='If it is a client or null, for transactional emails.',
        examples=['null'],
    )


class Fulfillment(BaseModel):
    Count: int
    Facets: str
    Max: int
    Mean: float
    Min: int
    Missing: int
    StdDev: float
    Sum: int
    SumOfSquares: int


class Fulfillment1(BaseModel):
    Count: int
    Facets: str
    Max: int
    Mean: int
    Min: int
    Missing: int
    StdDev: int
    Sum: int
    SumOfSquares: int


class Getfeedorderstatus(BaseModel):
    currentChange: str
    domain: str
    eventId: str
    handle: str
    lastChange: str
    lastState: str
    orderId: str
    state: str


class Headers(BaseModel):
    key: str


class Hook(BaseModel):
    headers: Headers
    url: str


class HookFilter(BaseModel):
    disableSingleFire: Optional[bool] = Field(
        False,
        description='Sets a limit to how many times a specific order shows on the hook, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the hook only once. Send this field if you want to filter `FromOrders`.',
    )
    expression: Optional[str] = Field(
        None,
        description='JSONata query expression that defines what conditions must be met for an order to be included in the hook. This should only be used in case `type` is `FromOrders`.',
    )
    status: Optional[List[str]] = Field(
        None,
        description='List of order statuses that should be included in the hook. This should only be used in case `type` is `FromWorkflow`.',
    )
    type: str = Field(
        ...,
        description='Determines what orders appear in the hook and how they are filtered. As shown in the examples above, there are two ways:\r\n\r\n - `FromWorkflow`: the hook will receive order updates only when there is a change or update in the [order status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196). You must send at least one value for the `status` field to determine by which status the orders will be filtered.\r\n\r\n - `FromOrders`: the hook will receive order updates when there is a change in the order. In this case, orders can be filtered by any property, according to JSONata expressions passed in the `expression` field. You must send the request with values for the `expression` and `disableSingleFire` fields.',
    )


class AttachmentOffering(BaseModel):
    name: str = Field(..., description='Name of the attachment.')
    required: bool = Field(
        ..., description='If the attachment is required (`true`) or not (`false`).'
    )
    schema_: Dict[str, Any] = Field(
        ...,
        alias='schema',
        description='Schema of the content declared in the field `attachmentOfferings`.',
    )


class SellingPrice(BaseModel):
    quantity: int = Field(..., description='Quantity of items.')
    value: int = Field(..., description='Total value of items in cents.')


class PriceDefinitions(BaseModel):
    calculatedSellingPrice: int = Field(
        ..., description="Item's calculated unitary selling price in cents."
    )
    sellingPrices: List[SellingPrice] = Field(
        ..., description="Details on item's selling price."
    )
    total: int = Field(..., description="Total value of all item's units in cents.")


class Item1(BaseModel):
    description: Optional[str] = Field(
        '335',
        description='You can use this field for additional information about the SKU being invoiced.',
    )
    id: str = Field(..., description='ID of the SKU being invoiced.')
    price: int = Field(
        ...,
        description='Total price of the SKU being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.',
    )
    quantity: int = Field(
        ..., description='Quantity currently in inventory of the SKU being invoiced.'
    )


class Item2(BaseModel):
    description: str = Field(..., description='Description of items.')
    ean: str = Field(..., description='EAN of the SKU.')
    id: str = Field(
        ..., description="Item's SKU ID, which is a unique numerical identifier."
    )
    price: int = Field(..., description="Item's price.")
    productId: str = Field(
        ..., description='ID of the Product associated with the item.'
    )
    quantity: int = Field(..., description='Quantity of SKUs.')
    refId: str = Field(..., description="Item's reference ID.")
    seller: str = Field(..., description='Seller related to the order.')
    sellingPrice: int = Field(..., description="Details on item's selling price.")


class ItemAttachment(BaseModel):
    content: Dict[str, Any] = Field(
        ..., description="Attachment's custom field for content."
    )
    name: str = Field(..., description="Attachment's name.")


class ItemsRemoved(BaseModel):
    id: str = Field(..., description='SKU ID of the item removed from the order.')
    name: str = Field(..., description='Name of the item removed from the order.')
    price: int = Field(..., description='Total amount of items removed from the order.')
    quantity: int = Field(..., description='Quantity of items removed from the order.')
    unitMultiplier: str = Field(
        ..., description='Unit multiplier of the item removed from the order.'
    )


class ListModel(BaseModel):
    ShippingEstimatedDate: str
    ShippingEstimatedDateMax: str
    ShippingEstimatedDateMin: str
    affiliateId: str
    authorizedDate: str
    callCenterOperatorName: str
    clientName: str
    creationDate: str
    currencyCode: str
    items: str
    lastMessageUnread: str
    listId: str
    listType: str
    marketPlaceOrderId: str
    orderId: str
    orderIsComplete: bool
    origin: str
    paymentNames: str
    salesChannel: str
    sequence: str
    status: str
    statusDescription: str = Field(
        ...,
        description='`Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.',
    )
    totalItems: int
    totalValue: int
    workflowInErrorState: bool
    workflowInRetry: bool


class List1(BaseModel):
    ShippingEstimatedDate: str = Field(..., description='Estimate shipping date.')
    ShippingEstimatedDateMax: str = Field(
        ..., description='The most extended shipping estimation possible.'
    )
    ShippingEstimatedDateMin: str = Field(
        ..., description='The least extended shipping estimation possible.'
    )
    affiliateId: str = Field(
        ...,
        description='Corresponds to the three-digits [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.',
    )
    authorizedDate: str = Field(..., description='Authorized order date.')
    callCenterOperatorName: str = Field(
        ..., description='Call center operator responsible for the order.'
    )
    clientName: str = Field(..., description="Order's customer name.")
    creationDate: str = Field(..., description="Order's creation date.")
    currencyCode: str = Field(
        ..., description='Currency code in ISO 4217. For example, `BRL`.'
    )
    items: List[Item2] = Field(..., description="Information about order's items")
    lastMessageUnread: str = Field(..., description='Last sent transactional message.')
    listId: str = Field(..., description='Related Gift List ID.')
    listType: str = Field(..., description='Related Gift list type.')
    marketPlaceOrderId: str = Field(..., description='Marketplace order ID.')
    orderId: str = Field(
        ..., description='Order ID is a unique code that identifies an order.'
    )
    orderIsComplete: bool = Field(
        ...,
        description='If it is a completed order (`true`) or not (`false`). For more information, see [Order flow and status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).',
    )
    origin: str = Field(
        ..., description='Order Origin, if `Marketplace` or `Fulfillment`.'
    )
    paymentNames: str = Field(..., description='Payment system name.')
    salesChannel: str = Field(
        ...,
        description='Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.',
    )
    sequence: str = Field(
        ...,
        description='Six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.',
    )
    status: str = Field(
        ...,
        description='Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).',
    )
    statusDescription: str = Field(
        ...,
        description='Status description which is displayed on the Admin panel. This field is deprecated and may not return any value.',
    )
    totalItems: int = Field(..., description="Order's total amount of items.")
    totalValue: int = Field(..., description='Total value amount.')
    workflowInErrorState: bool = Field(
        ..., description='If there is a work flow error (`true`) or not (`false`).'
    )
    workflowInRetry: bool = Field(
        ...,
        description='If the order is in a work flow retry (`true`) or not (`false`).',
    )


class DeliveryChannel(BaseModel):
    id: str = Field(
        ...,
        description="Delivery channel's shipping type, which can be `delivery` or `pickup-in-point`.",
    )
    stockBalance: int = Field(..., description='Stock check for an SKU availability.')


class Marketplace(BaseModel):
    baseURL: str = Field(..., description='Marketplace base URL.')
    isCertified: str = Field(..., description='If is a certified marketplace.')
    name: str = Field(..., description='Name of the marketplace.')


class Marketplace1(BaseModel):
    Count: int
    Facets: str
    Max: int
    Mean: float
    Min: int
    Missing: int
    StdDev: float
    Sum: int
    SumOfSquares: int


class Marketplace2(BaseModel):
    Count: int
    Facets: str
    Max: int
    Mean: float
    Min: int
    Missing: int
    StdDev: float
    Sum: int
    SumOfSquares: int


class Origin(BaseModel):
    Fulfillment_1: Fulfillment = Field(..., alias='Fulfillment')
    Marketplace: Marketplace1


class Origin1(BaseModel):
    Fulfillment: Fulfillment1
    Marketplace: Marketplace2


class Origin2(BaseModel):
    Account: str
    Key: str


class PackageAttachment(BaseModel):
    packages: List[str] = Field(..., description='Packages details.')


class Paging(BaseModel):
    currentPage: int
    pages: int
    perPage: int
    total: int


class ConnectorResponses1(BaseModel):
    Message: str = Field(
        ..., description="Provider's operation/error message to be logged."
    )
    ReturnCode: str = Field(
        ..., description="Provider's operation/error code to be logged."
    )
    Tid: str = Field(
        ..., description="Provider's unique identifier for the transaction."
    )
    authId: str = Field(..., description="Connector's authorization ID.")


class Payment(BaseModel):
    accountId: str = Field(..., description="Payment's account ID.")
    bankIssuedInvoiceBarCodeNumber: str = Field(
        ..., description='Number of the bank issued invoice bar code.'
    )
    bankIssuedInvoiceBarCodeType: str = Field(
        ..., description='Type of the bank issued invoice bar code.'
    )
    bankIssuedInvoiceIdentificationNumber: str = Field(
        ..., description='Numeric sequence that identifies the bank issued invoice.'
    )
    bankIssuedInvoiceIdentificationNumberFormatted: str = Field(
        ..., description='Bank issued invoice ID formatted.'
    )
    billingAddress: Dict[str, Any] = Field(
        ..., description='Billing address information.'
    )
    cardHolder: str = Field(..., description='Name of the person who owns the card.')
    cardNumber: str = Field(
        ..., description='Numeric sequence of the card used in the transaction.'
    )
    connectorResponses: ConnectorResponses1 = Field(
        ..., description='Information about the connector responses.'
    )
    cvv2: str = Field(
        ...,
        description='Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.',
    )
    dueDate: str = Field(
        ..., description='Payment due date, with the format `yyyy-mm-dd`.'
    )
    expireMonth: str = Field(
        ..., description='Expire month of the card used in the transaction (2-digits).'
    )
    expireYear: str = Field(
        ..., description='Expire year of the card used in the transaction (4-digits).'
    )
    firstDigits: str = Field(
        ..., description='Fist digits of the card used in the transaction.'
    )
    giftCardAsDiscount: bool = Field(
        ...,
        description='When this field is set as `true`, the Gift Card is a discount over the price, and when set as `false`, it is not a discount.',
    )
    giftCardCaption: str = Field(..., description="Gift Card's caption.")
    giftCardId: str = Field(..., description="Gift Card's ID.")
    giftCardName: str = Field(..., description="Gift Card's name.")
    giftCardProvider: str = Field(..., description="Gift Card provider's ID.")
    group: str = Field(
        ..., description='Name of the collection the Gift Card belongs to.'
    )
    id: str = Field(
        ..., description='VTEX payment ID that can be used as unique identifier.'
    )
    installments: int = Field(..., description='Number of payment installments.')
    koinUrl: str = Field(..., description="Payment's account ID.")
    lastDigits: str = Field(
        ..., description='Last digits of the card used in the transaction.'
    )
    parentAccountId: str = Field(
        ...,
        description='This field retrieves the main account if the payment was made in a subaccount.',
    )
    paymentSystem: str = Field(..., description="Payment system's ID.")
    paymentSystemName: str = Field(..., description="Payment system's name.")
    redemptionCode: str = Field(
        ..., description='Code for the customer to use the Gift Card.'
    )
    referenceValue: int = Field(..., description="Payment's reference value in cents.")
    tid: str = Field(
        ..., description="Provider's unique identifier for the transaction."
    )
    url: str = Field(..., description="Payment's URL.")
    value: int = Field(..., description="Payment's final amount in cents.")


class Payment1(BaseModel):
    cardHolder: str = Field(..., description='Payment card holder.')
    cardNumber: str = Field(..., description='Payment card number.')
    connectorResponses: ConnectorResponses
    cvv2: str = Field(
        ...,
        description='Card Verification Value (CVV2) is a security code used by payment processors to reduce fraudulent credit and debit card transactions.',
    )
    dueDate: str = Field(..., description='Payment due date.')
    expireMonth: str = Field(..., description='Payment card expire month.')
    expireYear: str = Field(..., description='Payment card expire year.')
    firstDigits: str = Field(..., description='Payment card first digits.')
    giftCardCaption: str = Field(..., description='Gift Card caption.')
    giftCardId: str = Field(..., description='Gift Card ID.')
    giftCardName: str = Field(..., description='Gift Card name.')
    group: str = Field(
        ...,
        description='It represents the payment method. For each method, it can have the following values: \n\r\n- **Credit card:** `creditCard` \r\n\r\n- **Debid card:** `debitCard`\r\n\r\n- **Bank invoice:** `bankInvoice`\r\n\r\n- **Promissory:** `promissory` \r\n\r\n- **Gift card:** `giftCard` \n\r\n- **Pix:** `instantPayment`',
    )
    id: str = Field(..., description='Payment ID.')
    installments: int = Field(..., description='Payment Installments quantity.')
    lastDigits: str = Field(..., description='Payment card last digits.')
    paymentSystem: str = Field(..., description='Payment system ID.')
    paymentSystemName: str = Field(..., description='Payment system name.')
    redemptionCode: str = Field(
        ..., description='Code for the customer to use the Gift Card.'
    )
    referenceValue: int = Field(..., description='Payment reference Value.')
    tid: str = Field(..., description='Payment transaction ID.')
    url: str = Field(..., description='Payment URL.')
    value: int = Field(..., description='Payment value.')


class PickupStoreInfo(BaseModel):
    additionalInfo: str = Field(
        ..., description='Additional information about the pickup point.'
    )
    address: str = Field(..., description="Pickup point's address.")
    dockId: str = Field(
        ...,
        description='ID of the [loading dock](https://help.vtex.com/pt/tutorial/doca--5DY8xHEjOLYDVL41Urd5qj) related to the delivery or the pickup point.',
    )
    friendlyName: str = Field(
        ..., description='Name of the pickup point displayed at checkout.'
    )
    isPickupStore: bool = Field(
        ...,
        description='If this field is set `true`, it means the type of shipping is pickup, and if set as `false`, it is not.',
    )


class Queue(BaseModel):
    MessageRetentionPeriodInSeconds: int = Field(
        ...,
        description='Maximum life span of an order update in the feed. When a feed item is on the feed for this period of time, it is removed from the feed. Measured in seconds.',
        examples=[3456000],
    )
    visibilityTimeoutInSeconds: int = Field(
        ...,
        description='Period of time for which an item becomes invisible after it has been [retrieved](https://developers.vtex.com/vtex-rest-api/reference/feed-v3#getfeedorderstatus1). Measured in seconds.',
        examples=[250],
    )


class RatesAndBenefitsData(BaseModel):
    id: str = Field(..., description='ID of the rate or benefit.')
    rateAndBenefitsIdentifiers: List[str] = Field(
        ..., description="Information about order's promotions and taxes identifiers."
    )


class Receipt(BaseModel):
    date: str = Field(..., description='Date when the receipt was created.')
    orderId: str = Field(..., description='ID of the order.')
    receipt: str = Field(..., description="Receipt's unique identifier code.")


class RegisterChange(BaseModel):
    date: Optional[str] = Field(None, description='Date of order change.')
    orderId: Optional[str] = Field(None, description='ID of the order.')
    receipt: Optional[str] = Field(None, description='Receipt')


class ItemsAddedItem(BaseModel):
    id: str = Field(..., description='Product ID of the item.')
    price: int = Field(..., description='Price of the item in cents.')
    quantity: int = Field(..., description='Amount of items to be added.')


class ItemsRemovedItem(BaseModel):
    id: str = Field(..., description='Product ID of the item.')
    price: int = Field(..., description='Price of the item in cents.')
    quantity: int = Field(..., description='Amount of items to be removed.')


class RegisterChangeRequest(BaseModel):
    discountValue: int = Field(
        ...,
        description='This field can be used to apply a discount to the total value of the order. Value in cents.',
    )
    incrementValue: int = Field(
        ...,
        description='This field can be used to increment the total value of the order. Value in cents.',
    )
    itemsAdded: Optional[List[ItemsAddedItem]] = Field(
        None, description='List of items that should be added to the order.'
    )
    itemsRemoved: Optional[List[ItemsRemovedItem]] = Field(
        None, description='List of items that should be removed from the order.'
    )
    reason: str = Field(
        ...,
        description='Reason for order change. This may be shown to the shopper in the UI or transactional emails.',
    )
    requestId: str = Field(
        ...,
        description='Request identification of the change. Only the first change made with each `requestId` will be effective on a given order. Use different IDs for different changes to the same order.',
    )


class SelectedAddress(BaseModel):
    addressId: str = Field(..., description='Selected address ID.')
    addressType: str = Field(
        ...,
        description="Selected adress's shipping type, which can be `pickup`, `residential`, `invoice`, `search`, `inStore`, `commercial` or `giftRegistry`.",
    )
    city: str = Field(..., description='City of the selected address.')
    complement: str = Field(
        ..., description='Complement to the selected address if it applies.'
    )
    country: str = Field(
        ...,
        description='Three letters ISO code of the country of the selected address (ISO 3166 ALPHA-3).',
    )
    entityId: str = Field(
        ..., description='Shipping address entity ID  of the selected address.'
    )
    geoCoordinates: List[str] = Field(
        ...,
        description="Array with two numbers with the selected address's geocoordinates, first longitude then latitude.",
    )
    neighborhood: str = Field(..., description='Neighborhood of the selected address.')
    number: str = Field(
        ...,
        description='Number of the building, house or apartment of the selected address.',
    )
    postalCode: str = Field(..., description='Postal code of the selected address.')
    receiverName: str = Field(
        ...,
        description='Name of the person who is going to receive the order in the selected address.',
    )
    reference: str = Field(
        ..., description='Complement to help locate the selected address.'
    )
    state: str = Field(..., description='State of the selected address.')
    street: str = Field(..., description='Street of the selected address.')
    versionId: str = Field(
        ..., description='Shipping address version ID of the selected address.'
    )


class Seller(BaseModel):
    fulfillmentEndpoint: str = Field(
        ..., description="URL of the endpoint for fulfillment of seller's orders."
    )
    id: str = Field(..., description='Seller ID that identifies the seller.')
    logo: str = Field(..., description="URL of the seller's logo.")
    name: str = Field(..., description="Seller's name.")


class Sla(BaseModel):
    deliveryChannel: str = Field(
        ..., description='If the delivery channel is `delivery` or `pickup-in-point`.'
    )
    deliveryWindow: str = Field(
        ...,
        description='[Scheduled delivery window](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) information, if it applies to the item.',
    )
    id: str = Field(
        ...,
        description='ID of the shipping method used in the [shipping policy](https://help.vtex.com/en/tutorial/shipping-policy--tutorials_140).',
    )
    lockTTL: str = Field(
        ...,
        description='Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time of the SLA.',
    )
    name: str = Field(..., description='Name of the shipping policy.')
    pickupDistance: float = Field(
        ...,
        description="Distance in kilometers between the pickup point and the customer's address. The distance is measured as a straight line.",
    )
    pickupPointId: str = Field(
        ...,
        description='[Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R) ID related to the SLA.',
    )
    pickupStoreInfo: PickupStoreInfo
    polygonName: str = Field(
        ...,
        description='Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.',
    )
    price: int = Field(
        ...,
        description="Shipping price for the item in cents. Does not account for the whole order's shipping price.",
    )
    shippingEstimate: str = Field(
        ...,
        description='Total shipping estimate time in days. For instance, three business days is represented `3bd`.',
    )
    transitTime: str = Field(
        ...,
        description='Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.',
    )


class StorePreferencesData(BaseModel):
    countryCode: str = Field(
        ..., description='Three letters ISO code of the country (ISO 3166 ALPHA-3).'
    )
    currencyCode: str = Field(
        ..., description='Currency code in ISO 4217. For example, `BRL`.'
    )
    currencyFormatInfo: CurrencyFormatInfo
    currencyLocale: int = Field(
        ..., description='Currency Locale Code in LCID in decimal.'
    )
    currencySymbol: str = Field(..., description='Currency symbol.')
    timeZone: str = Field(..., description='Time zone from where the order was made.')


class TestJSONataExpression(BaseModel):
    Document: str = Field(
        ..., description='JSON document to be evaluated by the expression.'
    )
    Expression: str = Field(..., description='JSONata expression to be tested.')


class To(BaseModel):
    aliasMaskType: int = Field(
        ..., description='Conversation tracker mask type.', examples=[0]
    )
    conversationRelatedTo: str = Field(
        ..., description='Related order ID.', examples=['1305371685465-01']
    )
    conversationSubject: str = Field(
        ..., description='Conversation subject.', examples=['oms']
    )
    email: str = Field(
        ..., description="Receiver's email.", examples=['customer.name@email.com']
    )
    emailAlias: str = Field(
        ...,
        description='Sender transactional tracker email.',
        examples=['64d8bd8dbe5c4e7b93b8b3c237e50be1@ct.name.com.br'],
    )
    name: str = Field(..., description="Receiver's name.", examples=['Mary John'])
    role: str = Field(
        ...,
        description='If it is a customer or null, for transactional emails.',
        examples=['Customer'],
    )


class Total(BaseModel):
    id: str = Field(
        ...,
        description='Code that identifies if the information is about `Items`, `Discounts`, `Shipping`, `Tax` or `Change`.',
    )
    name: str = Field(
        ..., description='Name of `Items`, `Discounts`, `Shipping`, `Tax` or `Change`.'
    )
    value: int = Field(
        ...,
        description='Total amount of `Items`, `Discounts`, `Shipping`, `Tax` or `Change`.',
    )


class TotalItems1(BaseModel):
    Count: int
    Facets: Dict[str, Any]
    Max: int
    Mean: int
    Min: int
    Missing: int
    StdDev: int
    Sum: int
    SumOfSquares: int


class TotalValue1(BaseModel):
    Count: int
    Facets: Dict[str, Any]
    Max: int
    Mean: int
    Min: int
    Missing: int
    StdDev: int
    Sum: int
    SumOfSquares: int


class Transaction(BaseModel):
    isActive: bool = Field(
        ...,
        description='When this field is set as `true`, the payment is active, and when it is `false`, the payment is inactive.',
    )
    merchantName: str = Field(
        ..., description='Name of the merchant that will receive the payment.'
    )
    payments: List[Payment] = Field(
        ..., description='Detailed information about payment.'
    )
    transactionId: str = Field(..., description='ID of the transaction.')


class UpdateTrackingStatus(BaseModel):
    date: str
    orderId: str
    receipt: str


class UpdateTrackingStatusRequest(BaseModel):
    deliveredDate: str = Field(
        ...,
        description='Date and time of when the package was delivered. Note that it is different from the tracking date parameter. The `deliveredDate` format is `yyyy-mm-dd hh:mm`.',
    )
    events: List[Event] = Field(..., description='')
    isDelivered: bool


class UpdatepartialinvoiceSendTrackingNumber(BaseModel):
    date: str
    orderId: str
    receipt: str


class UpdatepartialinvoiceSendTrackingNumberRequest(BaseModel):
    courier: str = Field(
        ..., description='The name of the carrier responsible for delivering the order.'
    )
    dispatchedDate: str = Field(
        ...,
        description='Date when the package was dispatched. For example, 2023-01-08T13:16:13.4617653+00:00.',
    )
    trackingNumber: str = Field(
        ..., description='The number code that identifies the order tracking.'
    )
    trackingUrl: str = Field(..., description='Package tracking URL.')


class CancellationData(BaseModel):
    CancellationDate: str = Field(
        ..., description='The date when the order was cancelled.'
    )
    Reason: str = Field(..., description='The reason why the order was cancelled.')
    RequestedByPaymentNotification: bool = Field(
        ...,
        description='If the order cancellation was requested by the payment gateway (`true`) or not (`false`).',
    )
    RequestedBySellerNotification: bool = Field(
        ...,
        description='If the order cancellation was requested by the seller (`true`) or not (`false`).',
    )
    RequestedBySystem: bool = Field(
        ...,
        description='If the order cancellation was made by the system (`true`) or not (`false`). This type of order cancellation happens in [incomplete orders](https://help.vtex.com/en/tutorial/how-incomplete-orders-work--tutorials_294), for example.',
    )
    RequestedByUser: bool = Field(
        ...,
        description='If the order cancellation was requested by the costumer (`true`) or not (`false`).',
    )


class ClientPreferencesData(BaseModel):
    locale: str = Field(
        ..., description="Customer's prefered language while accessing the store."
    )
    optinNewsLetter: bool = Field(
        ...,
        description='When set as `true`, this field indicates customers opted to receive the newsletters, and when set as `false`, it means they did not.',
    )


class AssemblyOption(BaseModel):
    Composition: Dict[str, Any] = Field(
        ..., description="Displays the attachment's composition."
    )
    Id: str = Field(..., description='ID of the attachment related to the order.')
    InputValues: Dict[str, Any] = Field(
        ..., description="Displays the attachment's content."
    )
    Name: str = Field(..., description='Name of the attachment related to the order.')
    Required: bool = Field(
        ...,
        description='If this field is set as `true`, when the customer purchases the item sending the attachment is required, and when set as `false`, sending the attachment is optional.',
    )


class Item3(BaseModel):
    AssemblyOptions: List[AssemblyOption] = Field(
        ...,
        description='Displays information about [assembly options](https://help.vtex.com/en/tutorial/assembly-options--5x5FhNr4f5RUGDEGWzV1nH) related to the item, if there are any.',
    )
    DetailUrl: str = Field(..., description='URL slug of the item.')
    Ean: str = Field(..., description='EAN of the item.')
    Id: str = Field(
        ..., description="Item's SKU ID, which is a unique numerical identifier."
    )
    ImageUrl: str = Field(..., description="Item's SKU image URL.")
    Name: str = Field(
        ..., description='Name of the item as displayed to customers in the storefront.'
    )
    ProductId: str = Field(
        ..., description='ID of the Product associated with the item.'
    )
    RefId: str = Field(..., description="Item's reference ID.")
    Seller: str = Field(
        ..., description='Seller ID that identifies the seller the item belongs to.'
    )
    SkuName: str = Field(..., description='Name of the SKU corresponding to the item.')


class ItemMetadata(BaseModel):
    Items: List[Item3] = Field(..., description='Metadata items.')


class MarketingData(BaseModel):
    coupon: str = Field(..., description="Coupon's code information.")
    id: str = Field(
        ..., description='Object ID which expected value is `marketingData`.'
    )
    marketingTags: List[str] = Field(
        ...,
        description='Marketing tags information. This field can be used to register campaign data or informative tags regarding promotions.',
    )
    utmCampaign: str = Field(
        ...,
        description='Value of the `utm_campaign` parameter of the URL that led to the request.',
    )
    utmMedium: str = Field(
        ...,
        description='Value of the `utm_medium` parameter of the URL that led to the request.',
    )
    utmPartner: str = Field(..., description='UTM Source Parameters.')
    utmSource: str = Field(
        ...,
        description='Value of the `utm_source` parameter of the URL that led to the request.',
    )
    utmiCampaign: str = Field(..., description='Internal UTM value `utmi_cp`.')
    utmiPart: str = Field(..., description='Internal UTM value `utmi_pc`.')
    utmipage: str = Field(..., description='Internal UTM value `utmi_p`.')


class Frequency(BaseModel):
    interval: int = Field(
        ...,
        description="Number of the time interval configured between subscription orders, which depends on the periodicity. For a `DAILY` periodicity, the field's value will correspond to days, for `MONTHLY` to months, and so on.",
    )
    periodicity: str = Field(
        ...,
        description='Defines the subscriptions recurrence period. The possible values are `DAILY`,`WEEKLY`, `MONTHLY` and `YEARLY`.',
    )


class Validity(BaseModel):
    begin: str = Field(
        ...,
        description="Subscriptions' beginning date with the format `yyyy-mm-ddThh:mm:ss`.",
    )
    end: str = Field(
        ...,
        description="Subscriptions' ending date with the format `yyyy-mm-ddThh:mm:ss`.",
    )


class Plan(BaseModel):
    frequency: Frequency = Field(
        ..., description="Information about subscriptions' recurrence."
    )
    type: str = Field(..., description='Type of plan.')
    validity: Validity = Field(
        ...,
        description='Information about the period during which the subscription will be valid.',
    )


class Subscription(BaseModel):
    ExecutionCount: int = Field(
        ...,
        description='Position of the order in the subscription cycle. The first order will have the value `0`, the second will have the value `1`, and so on.',
    )
    ItemIndex: int = Field(
        ...,
        description="Each item in the subscriptions' order is identified by an index. The position starts in`0`, followed by `1`, `2`, and so on.",
    )
    Plan_1: Plan = Field(
        ...,
        alias='Plan',
        description="Information about the subscription's validility and frequency.",
    )
    PriceAtSubscriptionDate: float = Field(
        ...,
        description='Price of the order when the customer signed up for subscriptions. Subscriptions created from Admin UI or APIs do not have an original order, so the field returns `0.0`. This field was valid only for Subscriptions v2 and is deprecated in Subscriptions v3.',
    )


class SubscriptionData(BaseModel):
    SubscriptionGroupId: str = Field(
        ...,
        description="ID of the subscription's group. If this field returns `null` and the `executionCount` is `0`, the order is the first one with subscriptions.",
    )
    Subscriptions: List[Subscription] = Field(
        ..., description='List with subscriptions and their details.'
    )


class PriceTag(BaseModel):
    isPercentual: bool = Field(
        ..., description='If the tax is a percentage (`true`) or note (`false`).'
    )
    name: str = Field(..., description='Name that identifies the tax.')
    rawValue: str = Field(..., description='The amount that corresponds to the tax.')


class TaxInfoCollectionItem(BaseModel):
    itemIndex: int = Field(..., description="Item's indexing number.")
    priceTags: List[PriceTag] = Field(..., description='Price tag information.')
    sku: str = Field(..., description='Alphanumeric sequence that identifies an SKU.')


class TaxData(BaseModel):
    areTaxesDesignatedByMarketplace: bool = Field(
        ...,
        description='If the taxes were designated by the marketplace (`true`), or not (`false`).',
    )
    taxInfoCollection: List[TaxInfoCollectionItem] = Field(
        ..., description="Array with taxes' details."
    )


class ApiCheckoutPvtConfigurationWindowToChangeSellerPostRequest(BaseModel):
    waitingTime: int = Field(
        ...,
        description='Number of days after order cancelation by a seller, during which another seller may be assigned to fulfill the order.',
    )


class ApiOmsPvtAdminReportsCompletedGetResponse(
    RootModel[List[ExportCompletedResponse]]
):
    root: List[ExportCompletedResponse]


class ApiOmsPvtAdminReportsInprogressGetResponse(
    RootModel[List[ExportInProgressResponse]]
):
    root: List[ExportInProgressResponse]


class Dimension1(BaseModel):
    cubicweight: Optional[float] = Field(None, description="The item's cubic weight.")
    height: Optional[float] = Field(None, description="The item's height.")
    length: Optional[float] = Field(None, description="The item's length.")
    weight: Optional[float] = Field(None, description="The item's weight.")
    width: Optional[float] = Field(None, description="The item's width.")


class AdditionalInfo1(BaseModel):
    brandId: Optional[str] = Field(None, description='Brand ID.')
    brandName: Optional[str] = Field(None, description='Brand name.')
    dimension: Optional[Dimension1] = Field(None, description='Dimension of the item.')
    offeringInfo: Optional[str] = Field(None, description='Offering information.')
    offeringType: Optional[str] = Field(None, description='Offering type.')
    offeringTypeId: Optional[str] = Field(None, description='Offering type ID.')


class BundleItem(BaseModel):
    id: Optional[int] = Field(None, description='Service identifier.')
    name: Optional[str] = Field(None, description='Name.')
    price: Optional[int] = Field(None, description='Price in cents.')
    type: Optional[str] = Field(None, description='Type')


class SellingPrice1(BaseModel):
    quantity: Optional[int] = Field(None, description='Quantity.')
    value: Optional[int] = Field(None, description='Value in cents.')


class PriceDefinition(BaseModel):
    calculatedSellingPrice: Optional[int] = Field(
        None, description='Calculated selling price in cents.'
    )
    sellingPrices: Optional[List[SellingPrice1]] = Field(
        None, description='Selling prices.'
    )
    total: Optional[int] = Field(None, description='Total in cents.')


class PriceTag1(BaseModel):
    identifier: Optional[str] = Field(None, description='Price tag identifier.')
    isPercentual: Optional[bool] = Field(
        None,
        description='Indicates whether price tag value is applied through a percentage.',
    )
    name: Optional[str] = Field(None, description='Name.')
    rawValue: Optional[int] = Field(None, description='Raw value.')
    value: Optional[int] = Field(None, description='Value.')


class ProductCategories(BaseModel):
    field_ID_: Optional[str] = Field(
        None,
        alias='{ID}',
        description='Product category corresponding to the ID in the field key.',
    )


class Item4(BaseModel):
    additionalInfo: Optional[AdditionalInfo1] = Field(
        None, description='Additional information.'
    )
    attachments: Optional[List[str]] = Field(
        None, description='Array containing information on attachments.'
    )
    availability: Optional[str] = Field(None, description='Availability')
    bundleItems: Optional[List[BundleItem]] = Field(
        None,
        description='Information on services sold along with the SKU. Example: a gift package.',
    )
    detailUrl: Optional[str] = Field(None, description='Detail URL.')
    ean: Optional[str] = Field(None, description='European Article Number.')
    id: Optional[str] = Field(None, description='ID.')
    imageUrl: Optional[str] = Field(None, description='Image URL.')
    isGift: Optional[bool] = Field(
        None, description='Indicates whether item is a gift.'
    )
    listPrice: Optional[int] = Field(None, description='List price in cents.')
    manualPrice: Optional[int] = Field(None, description='Manual price in cents.')
    manualPriceAppliedBy: Optional[str] = Field(
        None, description='User that applied the manual price, if that is the case.'
    )
    manufacturerCode: Optional[str] = Field(None, description='Manufacturer code.')
    measurementUnit: Optional[str] = Field(None, description='Measurement unit')
    modalType: Optional[str] = Field(None, description='Modal type.')
    name: Optional[str] = Field(None, description='Name.')
    parentAssemblyBinding: Optional[str] = Field(
        None, description='Parent assembly binding.'
    )
    parentItemIndex: Optional[int] = Field(None, description='Parent item index.')
    preSaleDate: Optional[str] = Field(None, description='Presale date.')
    price: Optional[int] = Field(None, description='Price in cents.')
    priceDefinition: Optional[PriceDefinition] = Field(
        None, description='Price information.'
    )
    priceTags: Optional[List[PriceTag1]] = Field(
        None,
        description='Array of price tags, each of which, modifies the price in some way, like discounts or rates that apply to the item in the context of the order.',
    )
    priceValidUntil: Optional[str] = Field(
        None, description='Price expiration date and time.'
    )
    productCategories: Optional[ProductCategories] = Field(
        None, description='Object, where each field is an ID from `productCategoryIds.'
    )
    productCategoryIds: Optional[str] = Field(None, description='Product category IDs.')
    productId: Optional[str] = Field(None, description='Product ID.')
    productRefId: Optional[str] = Field(None, description='Product Ref ID.')
    quantity: Optional[int] = Field(None, description='Quantity.')
    refId: Optional[str] = Field(None, description='Ref ID.')
    rewardValue: Optional[int] = Field(None, description='Reward value in cents.')
    seller: Optional[str] = Field(None, description='Seller.')
    sellerChain: Optional[List[str]] = Field(
        None,
        description='Sellers involved in the chain. The list should contain only one seller, unless it is a [Multilevel Omnichannel Inventory](https://help.vtex.com/pt/tutorial/multilevel-omnichannel-inventory--7M1xyCZWUyCB7PcjNtOyw4) order.',
    )
    sellingPrice: Optional[int] = Field(
        None,
        description='Selling price in cents. Note that this field may be subject to rounding discrepancies. We recommend retrieving data from the `priceDefinition` data structure instead.',
    )
    skuName: Optional[str] = Field(None, description='SKU name.')
    tax: Optional[int] = Field(None, description='Tax value in cents.')
    uniqueId: Optional[str] = Field(None, description="Order's item unique ID.")
    unitMultiplier: Optional[int] = Field(None, description='Unit multiplier')


class Item5(BaseModel):
    description: Optional[str] = Field(None, description='Description.')
    itemIndex: Optional[int] = Field(
        None,
        description='Item index in reference to the position of the item in the `items` array.',
    )
    price: Optional[int] = Field(None, description='Price in cents.')
    quantity: Optional[int] = Field(None, description='Quantity.')
    unitMultiplier: Optional[float] = Field(None, description='Unit multiplier.')


class Item6(BaseModel):
    itemIndex: Optional[str] = Field(
        None,
        description='Item index corresponding to the position of the item in the main `items` array.',
    )
    quantity: Optional[int] = Field(None, description='Quantity.')


class Refund(BaseModel):
    items: Optional[List[Item6]] = Field(None, description='Information on items.')


class Restitutions(BaseModel):
    refund: Optional[Refund] = Field(None, description='Information on refunds.')


class Package(BaseModel):
    cfop: Optional[str] = Field(None, description='Fiscal operation code.')
    courier: Optional[str] = Field(
        None,
        description='The name of the carrier responsible for delivering the order.',
    )
    courierStatus: Optional[str] = Field(None, description='Courier status.')
    embeddedInvoice: Optional[str] = Field(None, description='Embedded voice in XML.')
    invoiceKey: Optional[str] = Field(None, description='Invoice key.')
    invoiceNumber: Optional[str] = Field(
        None, description='Number that identifies the invoice.'
    )
    invoiceUrl: Optional[str] = Field(None, description='Invoice URL.')
    invoiceValue: Optional[int] = Field(None, description='Invoice value in cents.')
    issuanceDate: Optional[str] = Field(None, description='Issuance date.')
    items: Optional[List[Item5]] = Field(
        None, description='Information on each item in the package.'
    )
    restitutions: Optional[Restitutions] = Field(
        None,
        description='Information on how restitutions are to be made to the customer, in case of a return (invoice `type` is `input`).',
    )
    trackingNumber: Optional[str] = Field(
        None,
        description='The number code that identifies the order tracking. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`).*',
    )
    trackingUrl: Optional[str] = Field(None, description='Tracking URL.')
    type: Optional[str] = Field(
        None, description='Invoice type `Output` for sales and `Input` for returns.'
    )
    volumes: Optional[int] = Field(
        None, description='Quantity of packages involved in the order.'
    )


class PackageAttachment1(BaseModel):
    packages: Optional[List[Package]] = Field(
        None, description='Information on each package.'
    )


class Total1(BaseModel):
    id: Optional[str] = Field(None, description="Order's total ID.")
    name: Optional[str] = Field(None, description="Order's total name.")
    value: Optional[int] = Field(None, description="Order's total value.")


class ApiOmsPvtOrdersOrderIdCancelPostRequest(BaseModel):
    reason: Optional[str] = Field(
        'Unexpected stock shortage', description='Reason for cancelling the order.'
    )


class ApiOmsPvtOrdersOrderIdCancelPostResponse(BaseModel):
    date: Optional[str] = Field(
        None, description='Date and time when the notification was received.'
    )
    orderId: Optional[str] = Field(
        None, description='Identification of the order in the seller.'
    )
    receipt: Optional[str] = Field(
        None, description='Protocol code generated by the update. It may be `null`.'
    )


class ApiOmsPvtOrdersOrderIdInvoicePostResponse(BaseModel):
    date: Optional[str] = Field(
        None, description='Date and time when the notification was received.'
    )
    orderId: Optional[str] = Field(
        None, description='Identification of the order in the seller.'
    )
    receipt: Optional[str] = Field(
        None, description='Protocol code generated by the update. It may be `null`.'
    )


class Error(BaseModel):
    code: Optional[str] = Field(
        None,
        description='Error code in the Order Management System',
        examples=['OMS003'],
        title='code',
    )
    exception: Optional[str] = Field(
        None, description='Exception', examples=[None], title='exception'
    )
    message: Optional[str] = Field(
        None,
        description='Error message',
        examples=['Acesso não autorizado'],
        title='message',
    )


class ApiOmsPvtOrdersOrderIdStartHandlingPostResponse(BaseModel):
    error: Optional[Error] = Field(
        None, description='Object containing the error information', title='error'
    )


class Error1(BaseModel):
    code: Optional[str] = Field(
        None,
        description='Error code in the Order Management System',
        examples=['OMS003'],
        title='code',
    )
    exception: Optional[str] = Field(
        None, description='Exception', examples=[None], title='exception'
    )
    message: Optional[str] = Field(
        None,
        description='Error message',
        examples=['Order status should be ready-for-handling to perform this action'],
        title='message',
    )


class ApiOmsPvtOrdersOrderIdStartHandlingPostResponse1(BaseModel):
    error: Optional[Error1] = Field(
        None, description='Object containing the error information', title='error'
    )


class ApiOrdersFeedGetResponse(RootModel[List[Getfeedorderstatus]]):
    root: List[Getfeedorderstatus]


class ApiOrdersFeedPostResponse(BaseModel):
    pass


class Filter(BaseModel):
    disableSingleFire: Optional[bool] = Field(
        None,
        description='Sets a limit to how many times a specific order shows on the feed, after it first meets filtering conditions. Using the `FromOrders` type configuration with JSONata filtering expressions might cause orders to appear more than once on a feed, whenever changes are made to that order. If this field is `false` orders will appear in the feed only once.',
    )
    expression: Optional[str] = Field(
        None,
        description='JSONata query expression that defines what conditions must be met for an order to be included in the feed. This should only be used in case `type` is `FromOrders`.',
    )
    status: Optional[List[str]] = Field(
        None,
        description='List of order statuses that should be included in the feed. This should only be used in case `type` is `FromWorkflow`.',
    )
    type: Optional[str] = Field(
        None,
        description='Determines what orders appear in the feed and how they are filtered. If a feed has the `FromWorkflow` type configuration, it will receive order updates only when order’s statuses change and orders can be filtered by status, using the `status` field. A feed with the `FromOrders` type configuration gets updates whenever any change is made to an order. in this case, orders can be filtered by any property, according to JSONata expressions set in the `expression` field.',
    )


class Queue1(BaseModel):
    MessageRetentionPeriodInSeconds: Optional[int] = Field(
        None,
        description='Maximum life span of an order update after it gets to the feed. When a feed item is on the feed for this period of time, it is removed from the feed. Measured in seconds.',
    )
    visibilityTimeoutInSeconds: Optional[int] = Field(
        None,
        description='Period of time for which an item is not visible in the feed after it has been retrieved with the Get feed items request. Measured in seconds.',
    )


class ApiOrdersFeedConfigGetResponse(BaseModel):
    approximateAgeOfOldestMessageInSeconds: Optional[float] = Field(
        None,
        description='Aproximate age of the oldest message in the feed, measured in seconds.',
    )
    filter: Optional[Filter] = Field(
        None, description='Information on how orders are filtered to show on the feed.'
    )
    quantity: Optional[int] = Field(
        None,
        description='Current number of messages in the feed, including messages that may not be visible due to time out after retrieval.',
    )
    queue: Optional[Queue1] = Field(
        None, description='Information that define the functioning of the queue.'
    )


class AdditionalInfo(BaseModel):
    brandId: str = Field(..., description="Item's brand ID.")
    brandName: str = Field(..., description="Item's brand name.")
    categoriesIds: str = Field(..., description="Item's category ID.")
    commercialConditionId: str = Field(..., description='Commercial conditions ID.')
    dimension: Dimension
    offeringInfo: str = Field(
        ...,
        description='Information about services related to the item. For example: guarantee or installation.',
    )
    offeringType: str = Field(..., description='Offering type.')
    offeringTypeId: str = Field(..., description='Offering type ID.')
    productClusterId: str = Field(
        ..., description='All product clusters related to the item.'
    )


class ChangesDatum(BaseModel):
    discountValue: int = Field(..., description='Order change discount value.')
    incrementValue: int = Field(..., description='Order change increment value.')
    itemsAdded: List[str] = Field(..., description='List of items added to the order.')
    itemsRemoved: List[ItemsRemoved] = Field(
        ..., description='List of items removed from the order.'
    )
    reason: str = Field(
        ...,
        description='Text explaining why there was a change in the order. This information may be shown to the customer in the UI or transactional emails.',
    )
    receipt: Receipt


class Facets(BaseModel):
    currencyCode: CurrencyCode
    origin: Origin


class Facets1(BaseModel):
    currencyCode: CurrencyCode1
    origin: Origin1


class FeedConfigurationRequest(BaseModel):
    filter: FeedFilter
    queue: Queue


class GetConversation(BaseModel):
    attachmentNames: List[str] = Field(
        ..., description="List with attachments' names, if there are any."
    )
    body: str = Field(
        ...,
        description='Conversation content body.',
        examples=[
            '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional //EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> <html xmlns="http://www.w3.org/1999/xhtml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:v="urn:schemas-microsoft-com:vml" style="-webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; box-sizing: border-box; width: 100%; height: 100%; margin: 0; padding: 0; background: #f1f1f1 !important;"> <head> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/> <meta http-equiv="X-UA-Compatible" content="IE=edge"/> <meta name="viewport" content="width=device-width, initial-scale=1.0"/> <title>recorrenciaqa</title> <!--[if gte mso 9]> <xml> <o:OfficeDocumentSettings> <o:AllowPNG/> <o:PixelsPerInch>96</o:PixelsPerInch> </o:OfficeDocumentSettings> </xml> <![endif]--> <style> a[x-apple-data-detectors] { color: inherit !important; text-decoration: none !important; font-size: inherit !important; font-family: inherit !important; font-weight: inherit !important; line-height: inherit !important; } </style> <style> @media (max-width: 600px) { img { max-width: 100% !important; height: auto !important; } } </style> <style> @media screen and (min-width: 30em) { .ph4-ns { padding-left: 2rem !important; padding-right: 2rem !important; } .mv4-ns { margin-top: 2rem !important; margin-bottom: 2rem !important; } } </style> </head> <body style="-webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; box-sizing: border-box; width: 100%; height: 100%; margin: 0; padding: 0; background: #f1f1f1 !important; font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Helvetica, Arial, sans-serif;"> <table width="100%" border="0" cellpadding="0" cellspacing="0" style="box-sizing: border-box; margin: 0; padding: 0; background: #f1f1f1; border-collapse: collapse; border-spacing: 0; mso-table-lspace: 0pt; mso-table-rspace: 0pt; font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Helvetica, Arial, sans-serif; width: 100%; height: 100%; line-height: 100% !important;"> <tr style="box-sizing: border-box !important;"> <td align="left" valign="top" style="font-size: 14px; line-height: 20px; box-sizing: border-box; border-collapse: collapse; text-align: left !important; font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Helvetica, Arial, sans-serif;"> <table class="mv4-ns" width="100%" align="center" border="0" cellpadding="0" cellspacing="0" style="box-sizing: border-box; max-width: 40rem; width: 100%; background-color: #fff; border-collapse: collapse; border-spacing: 0; mso-table-lspace: 0pt; mso-table-rspace: 0pt !important; font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Helvetica, Arial, sans-serif;" bgcolor="#fff"> <tr style="box-sizing: border-box !important;"> <td class="ph4-ns" style="font-size: 14px; line-height: 20px; box-sizing: border-box; border-collapse: collapse; border-bottom-style: solid; border-bottom-width: 1px; border-color: #eee; width: 100%; padding-bottom: 2rem; text-align: center !important; font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Helvetica, Arial, sans-serif;" align="center"> <div style="box-sizing: border-box; width: 8rem; margin-bottom: 1rem; margin-top: 2rem; margin-right: auto; margin-left: auto !important;"> <a href="http://.com.br" style="box-sizing: border-box !important;"> <img alt="" border="0" width="auto" src="http://licensemanager.vtex.com.br/api/site/pub/accounts/9ddcfba5-3855-49ec-b61e-b2847b9314cc/logos/show" style="vertical-align: top; outline: none; text-decoration: none; -ms-interpolation-mode: bicubic; max-width: 100%; border: none; max-height: 80px !important;"> </img></a> </div> <h1 style="margin: 0; font-size: 50px; line-height: 58px; box-sizing: border-box !important;">Seu pagamento foi aprovado.</h1> <div style="box-sizing: border-box; color: #777; margin-top: .5rem !important;"> Referente ao Pedido <span style="font-weight: 700 !important;">#1305371685465-01</span> </div> </td> </tr> <tr style="box-sizing: border-box !important;"> <td class="ph4-ns" style="font-size: 14px; line-height: 20px; box-sizing: border-box; border-collapse: collapse; text-align: left; width: 100% !important; font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Helvetica, Arial, sans-serif;" align="left"> <div style="box-sizing: border-box; margin-top: 2rem !important;"> <p style="box-sizing: border-box !important;">    Olá, jose.     Estamos providenciando a emissão da Nota Fiscal do seu pedido e o envio do seu produto.  </p> </div> </td> </tr> <tr style="box-sizing: border-box !important;"> <td class="ph4-ns" style="font-size: 14px; line-height: 20px; box-sizing: border-box; border-collapse: collapse; text-align: left; width: 100%; padding-bottom: 2rem; padding-top: 1rem !important; font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Helvetica, Arial, sans-serif;" align="left"> <h3 style="font-size: 20px; line-height: 36px; text-transform: uppercase; letter-spacing: 1.2pt; font-weight: 300; margin-top: 16px; box-sizing: border-box; margin: 0 !important;">Pagamento</h3>    <div style="box-sizing: border-box; line-height: 1.5; font-size: 1.25rem !important;"> Visa  final 1111  <br/>R$ 3,99  à vista  </div>     </td> </tr> <tr style="box-sizing: border-box !important;"> <td class="ph4-ns" style="font-size: 14px; line-height: 20px; box-sizing: border-box; border-collapse: collapse; text-align: left; border-top-style: solid; border-top-width: 1px; border-color: #eee; padding-top: 1rem; padding-bottom: 1rem !important; font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Helvetica, Arial, sans-serif;" align="left"> <p style="box-sizing: border-box !important;"> Atenciosamente,<br/>Equipe recorrenciaqa </p> </td> </tr> </table> </td> </tr> </table> </body> </html>'
        ],
    )
    date: str = Field(
        ...,
        description='Conversation date.',
        examples=['2023-01-23T09:23:31.0000000+00:00'],
    )
    firstWords: str = Field(
        ...,
        description='First words of Conversation content.',
        examples=['Your payment has been aproved and we are waiting for...'],
    )
    from_: From = Field(..., alias='from')
    hasAttachment: bool = Field(
        ...,
        description='When set as `true`, it means there are attachments, when set as `false`, there are not.',
        examples=[False],
    )
    id: str = Field(
        ...,
        description='Conversation ID.',
        examples=['2023-01-23t09-23-08_619a80a05aa34efb982b309c7a1910e3'],
    )
    subject: str = Field(
        ...,
        description='Conversation content subject.',
        examples=['Your payment has been aproved.'],
    )
    to: List[To] = Field(..., description='Conversation receiver.')


class GetPaymenttransaction(BaseModel):
    isActive: bool = Field(
        ..., description='If it is an active transaction (`true`) or not (`false`).'
    )
    merchantName: str = Field(..., description="Transaction merchant's name.")
    payments: List[Payment1] = Field(..., description="Payments' details object.")
    status: str = Field(..., description='Transaction status.')
    transactionId: str = Field(..., description='Transaction ID.')


class HookConfiguration(BaseModel):
    CurrentChange: str
    Domain: str
    LastChange: str
    LastState: str
    OrderId: str
    Origin: Origin2
    State: str


class HookConfigurationRequest(BaseModel):
    filter: HookFilter
    hook: Hook


class InvoiceNotificationRequest(BaseModel):
    courier: Optional[str] = Field(
        None,
        description='The name of the carrier responsible for delivering the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`).*',
    )
    dispatchedDate: Optional[str] = Field(
        '2019-02-08T13:16:13.4617653+00:00',
        description='Order dispatch date. May be `null`.',
    )
    embeddedInvoice: Optional[str] = Field(
        '<NFe>\r\n<infNFe Id="NFe34687999999090910270550010000000015180000000000" versao="1.10">\r\n<ide>\r\n<cUF>37</cUF>\r\n<cNF>000005177</cNF>\r\n<natOp>Venda a vista</natOp>\r\n<indPag>0</indPag>\r\n<mod>55</mod>\r\n<serie>1</serie>\r\n<nNF>1</nNF>\r\n<dEmi>2018-07-06</dEmi>\r\n<dSaiEnt>2018-07-06</dSaiEnt>\r\n<tpNF>0</tpNF>\r\n<cMunFG>79950308</cMunFG>\r\n<tpImp>1</tpImp>\r\n<tpEmis>1</tpEmis>\r\n<cDV>3</cDV>\r\n<tpAmb>2</tpAmb>\r\n<finNFe>1</finNFe>\r\n<procEmi>0</procEmi>\r\n<verProc>NF-eletronica.com</verProc>\r\n</ide>\r\n<emit>\r\n<CNPJ>99999090998760</CNPJ>\r\n<xNome>NF-e Associacao NF-e</xNome>\r\n<xFant>NF-e</xFant>\r\n<enderEmit>\r\n<xLgr>Rua Central</xLgr>\r\n<nro>100</nro>\r\n<xCpl>Fundos</xCpl>\r\n<xBairro>Distrito Industrial</xBairro>\r\n<cMun>0000000</cMun>\r\n<xMun>Município</xMun>\r\n<UF>SP</UF>\r\n<CEP>0000000</CEP>\r\n<cPais>1058</cPais>\r\n<xPais>Brasil</xPais>\r\n<fone>1733021717</fone>\r\n</enderEmit>\r\n<IE>123456789012</IE>\r\n</emit>\r\n<dest>\r\n<CNPJ>00000000000000</CNPJ>\r\n<xNome>DISTRIBUIDORA DE AGUAS MINERAIS</xNome>\r\n<enderDest>\r\n<xLgr>AV DAS FONTES</xLgr>\r\n<nro>1777</nro>\r\n<xCpl>1001 ANDAR</xCpl>\r\n<xBairro>PARQUE</xBairro>\r\n<cMun>0000000</cMun>\r\n<xMun>Sao Paulo</xMun>\r\n<UF>SP</UF>\r\n<CEP>00000000</CEP>\r\n<cPais>1058</cPais>\r\n<xPais>BRASIL</xPais>\r\n<fone>3900000000</fone>\r\n</enderDest>\r\n<IE> </IE>\r\n</dest>\r\n<retirada>\r\n<CNPJ>000000000004</CNPJ>\r\n<xLgr>AV PAULISTA</xLgr>\r\n<nro>12345</nro>\r\n<xCpl>TERREO</xCpl>\r\n<xBairro>CERQUEIRA CESAR</xBairro>\r\n<cMun>0000000</cMun>\r\n<xMun>SAO PAULO</xMun>\r\n<UF>SP</UF>\r\n</retirada>\r\n<entrega>\r\n<CNPJ>00000000299000194</CNPJ>\r\n<xLgr>AV FARIA LIMA</xLgr>\r\n<nro>154400</nro>\r\n<xCpl>156 ANDAR</xCpl>\r\n<xBairro>PINHEIROS</xBairro>\r\n<cMun>0000308</cMun>\r\n<xMun>SAO PAULO</xMun>\r\n<UF>SP</UF>\r\n</entrega>\r\n<det nItem="1">\r\n<prod>\r\n<cProd>00001</cProd>\r\n<cEAN/>\r\n<xProd>Agua Mineral</xProd>\r\n<CFOP>5101</CFOP>\r\n<uCom>dz</uCom>\r\n<qCom>1000000.0000</qCom>\r\n<vUnCom>1</vUnCom>\r\n<vProd>10000000.00</vProd>\r\n<cEANTrib/>\r\n<uTrib>und</uTrib>\r\n<qTrib>12000000.0000</qTrib>\r\n<vUnTrib>1</vUnTrib>\r\n</prod>\r\n<imposto>\r\n<ICMS>\r\n<ICMS00>\r\n<orig>0</orig>\r\n<CST>00</CST>\r\n<modBC>0</modBC>\r\n<vBC>10000000.00</vBC>\r\n<pICMS>18.00</pICMS>\r\n<vICMS>1800000.00</vICMS>\r\n</ICMS00>\r\n</ICMS>\r\n<PIS>\r\n<PISAliq>\r\n<CST>01</CST>\r\n<vBC>10000000.00</vBC>\r\n<pPIS>0.65</pPIS>\r\n<vPIS>65000</vPIS>\r\n</PISAliq>\r\n</PIS>\r\n<COFINS>\r\n<COFINSAliq>\r\n<CST>01</CST>\r\n<vBC>10000000.00</vBC>\r\n<pCOFINS>2.00</pCOFINS>\r\n<vCOFINS>200000.00</vCOFINS>\r\n</COFINSAliq>\r\n</COFINS>\r\n</imposto>\r\n</det>\r\n<det nItem="2">\r\n<prod>\r\n<cProd>00002</cProd>\r\n<cEAN/>\r\n<xProd>Agua Mineral</xProd>\r\n<CFOP>5101</CFOP>\r\n<uCom>pack</uCom>\r\n<qCom>5000000.0000</qCom>\r\n<vUnCom>2</vUnCom>\r\n<vProd>10000000.00</vProd>\r\n<cEANTrib/>\r\n<uTrib>und</uTrib>\r\n<qTrib>3000000.0000</qTrib>\r\n<vUnTrib>0.3333</vUnTrib>\r\n</prod>\r\n<imposto>\r\n<ICMS>\r\n<ICMS00>\r\n<orig>0</orig>\r\n<CST>00</CST>\r\n<modBC>0</modBC>\r\n<vBC>10000000.00</vBC>\r\n<pICMS>18.00</pICMS>\r\n<vICMS>1800000.00</vICMS>\r\n</ICMS00>\r\n</ICMS>\r\n<PIS>\r\n<PISAliq>\r\n<CST>01</CST>\r\n<vBC>10000000.00</vBC>\r\n<pPIS>0.65</pPIS>\r\n<vPIS>65000</vPIS>\r\n</PISAliq>\r\n</PIS>\r\n<COFINS>\r\n<COFINSAliq>\r\n<CST>01</CST>\r\n<vBC>10000000.00</vBC>\r\n<pCOFINS>2.00</pCOFINS>\r\n<vCOFINS>200000.00</vCOFINS>\r\n</COFINSAliq>\r\n</COFINS>\r\n</imposto>\r\n</det>\r\n<total>\r\n<ICMSTot>\r\n<vBC>20000000.00</vBC>\r\n<vICMS>18.00</vICMS>\r\n<vBCST>0</vBCST>\r\n<vST>0</vST>\r\n<vProd>20000000.00</vProd>\r\n<vFrete>0</vFrete>\r\n<vSeg>0</vSeg>\r\n<vDesc>0</vDesc>\r\n<vII>0</vII>\r\n<vIPI>0</vIPI>\r\n<vPIS>130000.00</vPIS>\r\n<vCOFINS>400000.00</vCOFINS>\r\n<vOutro>0</vOutro>\r\n<vNF>20000000.00</vNF>\r\n</ICMSTot>\r\n</total>\r\n<transp>\r\n<modFrete>0</modFrete>\r\n<transporta>\r\n<CNPJ>00000000000000</CNPJ>\r\n<xNome>Distribuidora de Bebidas Fazenda de SP Ltda.</xNome>\r\n<IE>00000000999119</IE>\r\n<xEnder>Rua Central 100 - Fundos - Distrito Industrial</xEnder>\r\n<xMun>SAO PAULO</xMun>\r\n<UF>SP</UF>\r\n</transporta>\r\n<veicTransp>\r\n<placa>BXI1717</placa>\r\n<UF>SP</UF>\r\n<RNTC>123456789</RNTC>\r\n</veicTransp>\r\n<reboque>\r\n<placa>UUU0000</placa>\r\n<UF>SP</UF>\r\n<RNTC>123456789</RNTC>\r\n</reboque>\r\n<vol>\r\n<qVol>10000</qVol>\r\n<esp>CAIXA</esp>\r\n<marca>LINDOYA</marca>\r\n<nVol>500</nVol>\r\n<pesoL>1000000000.000</pesoL>\r\n<pesoB>1200000000.000</pesoB>\r\n<lacres>\r\n<nLacre>XYZ10231486</nLacre>\r\n</lacres>\r\n</vol>\r\n</transp>\r\n<infAdic>\r\n<infAdFisco>Nota Fiscal de exemplo NF-eletronica.com</infAdFisco>\r\n</infAdic>\r\n</infNFe>\r\n<Signature>\r\n<SignedInfo>\r\n<CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-0321120010315"/>\r\n<SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>\r\n<Reference URI="#NFe3508059999977777777705500100000000000000000">\r\n<Transforms>\r\n<Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature"/>\r\n<Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-66666615"/>\r\n</Transforms>\r\n<DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>\r\n<DigestValue>xFzhgdgnhjSD1e9uqe04lnoHT4ZzLSY=</DigestValue>\r\n</Reference>\r\n</SignedInfo>\r\n<SignatureValue>\r\nIz5Z3PLQbzZt9jnBtr6xsmHZMOu/3plXG9xxfFjRCQYGnD1rjlhzBGrqt026Ca2VHHM/bHNepi6FuFkAi595GScKVuHREUotzifE2OIjgavvTOrMwbXG7+0LYgkwPFiPCao2S33UpZe7MneaxcmKQGKQZw1fP8fsWmaQ4cczZT8=\r\n</SignatureValue>\r\n<KeyInfo>\r\n<X509Data>\r\n<X509Certificate>\r\nMIIEuzCCA6OgAwIBAgIDMTMxMA0GasfFSDAGQUAMIGSMQswCQYDVQQGEwJCUjELMAkGA1UECBMCUlMxFTATBgNVBAcTDFBvcnRvIEFsZWdyZTEdMBsGA1UEChMUVGVzdGUgUHJvamV0byBORmUgUlMxHTAbBgNVBAsTFFRlc3RlIFByb2pldG8gTkZlIFJTMSEwHwYDVQQDExhORmUgLSBBQyBJbnRlcm1lZGlhcmlhIDEwHhcNMDgwNDI4MDkwMTAyWhcNMDkwNDMwMjM1OTU5WjCBnjELMAkGA1UECBMCUlMxHTAfvw4567DRhg76FByb2pldG8gTkZlIFJTMR0wGwYDVQQKExRUZXN0ZSBQcm9qZXRvIE5GZSBSUzEVMBMGA1UEBxMMUE9SVE8gQUxFR1JFMQswCQYDVQQGEwJCUjEtMCsGA1UEAxMkTkZlIC0gQXNzb2NpYWNhbyBORi1lOjk5OTk5MDkwOTEwMjcwMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDDh6RRv0bj4RYX+tDQrZRb5opa77LBVVs+6LphIfSF3TSWPfnKh0+xLlBFdmnB5YGgbbW9Uon6pZQTfaC8jZhRhI5eFRRofY/Ugoeo0NGt6PcIQNZQd6lLQ/ASd1qWwjqJoEa7udriKjy3h351Mf1bng1VxS1urqC3Dn39ZWIEwQIDAQABo4IBjjCCAYowIgYDVR0jAQEABBgwFoAUPT5TqhNWAm+ZpcVsvB7malDBjEQwDwYDVR0TAQH/BAUwAwEBADAPBgNVHQ8BAf8EBQMDAOAAMAwGA1UdIAEBAAQCMAAwgbwGA1UdEQEBAASBsTCBrqA4BgVgTAEDBKAvBC0wNzA4MTk1MTE1MTk0NTMxMDg3MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDCgHQYFYEwBAwKgFAQSRmVybmFuZG8gQ2FudG8gQWx0oBkGBWBMAQMDoBAEDjk5OTk5MDkwOTEwMjcwoBcGBWBMAQMHoA4EDDAwMDAwMDAwMDAwMIEfZmVybmFuZG8tYWx0QHByb2NlcmdzLnJzLmdvdi5icjAgBgNVHSUBAf8EFjAUBggrBgEFBQcDAgYIKwYBBQUHAwQwUwYDVR0fAQEABEkwRzBFoEOgQYY/aHR0cDovL25mZWNlcnRpZmljYWRvLnNlZmF6LnJzLmdvdi5ici9MQ1IvQUNJbnRlcm1lZGlhcmlhMzguY3JsMA0GCSqGSIb3DQEBBQUAA4IBAQCNPpaZ3Byu3/70nObXE8NiM53j1ddIFXsb+v2ghCVd4ffExv3hYc+/a3lfgV8H/WfQsdSCTzS2cHrd4Aasr/eXfclVDmf2hcWz+R7iysOHuT6B6r+DvV3JcMdJJCDdynR5REa+zViMnVZo1G3KuceQ7/y5X3WFNVq4kwHvonJ9oExsWyw8rTwUK5bsjz0A2yEwXkmkJIngnF41sP31+9jCImiqkXcmsesFhxzX7iurAQAQCZOm7iwMWxQKcAjXCZrgSZWRQy6mU224sX3HTArHahmLJ9Iw+WYAua5qBJsiN6PC7v5tfhdsgGD46DHMnOecxvkkPolDUyBa7d7xwgm\r\n</X509Certificate>\r\n</X509Data>\r\n</KeyInfo>\r\n</Signature>\r\n</NFe>',
        description='XML text of the invoice, not the URL. This field is very important for external marketplace integrations such as Mercado Libre.',
    )
    invoiceKey: Optional[str] = Field(None, description='')
    invoiceNumber: str = Field(..., description='Number that identifies the invoice.')
    invoiceUrl: Optional[str] = Field(
        None,
        description='URL of the invoice. Can be used to send the URL of an XML file, for example, which is useful for some integrations.',
    )
    invoiceValue: str = Field(
        ...,
        description='Total amount being invoiced in cents. Do not use any decimal separator. For instance, `$24.99` should be represented as `2499`.',
    )
    issuanceDate: str = Field(
        ...,
        description='Issuance date of the invoice. You must add date and time in this field.',
        examples=['2019-01-31T18:25:43-05:00'],
    )
    items: List[Item1] = Field(
        ..., description='Array containing the SKUs that are being invoiced.'
    )
    trackingNumber: Optional[str] = Field(
        None,
        description='The number code that identifies the order tracking. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`).*',
    )
    trackingUrl: Optional[str] = Field(
        None,
        description='The URL used to track the order. *This field should only be used when sending the **tracking** information. When the request is used for sending the invoice, this field should be left empty (`""`).*',
    )
    type: str = Field(
        ...,
        description='The type of invoice. There are two possible values: **Output** and **Input**. The Output type should be used when the invoice you are sending is a selling invoice. The Input type should be used when you send a return invoice.',
    )


class Item(BaseModel):
    additionalInfo: AdditionalInfo
    assemblies: List = Field(
        ..., description="Retrieves information about orders item's customizations."
    )
    attachmentOfferings: List[AttachmentOffering] = Field(
        ..., description='List of attachments details.'
    )
    attachments: List[str] = Field(
        ..., description='Array containing information on attachments.'
    )
    bundleItems: List[str] = Field(
        ...,
        description="Information on services sold along with the item's SKU. For example, a gift package.",
    )
    callCenterOperator: str = Field(
        ..., description='Call center operator responsible for the order.'
    )
    commission: int = Field(
        ..., description='Commission value registered for the seller.'
    )
    components: List[str] = Field(..., description="Item's components.")
    costPrice: int = Field(..., description="Item's cost price.")
    detailUrl: str = Field(..., description='URL slug of the item.')
    ean: str = Field(..., description='EAN of the SKU.')
    freightCommission: int = Field(..., description='Value of the freight commission.')
    id: str = Field(
        ..., description="Item's SKU ID, which is a unique numerical identifier."
    )
    imageUrl: str = Field(..., description="Item's SKU image URL.")
    isGift: bool = Field(
        ...,
        description='This field is `true` when the item is a gift in order context and `false` when it is not.',
    )
    itemAttachment: ItemAttachment
    listPrice: int = Field(..., description="Item's list price.")
    lockId: str = Field(..., description='Reservation ID.')
    manualPrice: str = Field(..., description="Item's manual price.")
    measurementUnit: str = Field(..., description="Item's measurement unit.")
    name: str = Field(..., description="Item's name.")
    offerings: List[str] = Field(
        ...,
        description="Item's offerings, which are services related to the item. For example, guarantee or installation.",
    )
    params: List[str] = Field(..., description='Information about params.')
    parentAssemblyBinding: str = Field(..., description='Parent assembly binding.')
    parentItemIndex: str = Field(..., description='Parent item index.')
    preSaleDate: str = Field(..., description="Item's pre sale date.")
    price: int = Field(..., description="Item's price.")
    priceDefinitions: PriceDefinitions = Field(
        ..., description="Item's price information."
    )
    priceTags: List[str] = Field(
        ..., description="List of objects with item's price modifiers."
    )
    priceValidUntil: str = Field(
        ...,
        description='Date until when the price is going to be valid if there is a promotion.',
    )
    productId: str = Field(
        ..., description='ID of the Product associated with the item.'
    )
    quantity: int = Field(..., description='Quantity of items.')
    refId: str = Field(
        ..., description='Product referencial code associated with the item.'
    )
    rewardValue: int = Field(..., description="Item's reward value.")
    seller: str = Field(..., description='Seller related to the order.')
    sellerSku: str = Field(..., description='SKU ID from the seller perspective.')
    sellingPrice: int = Field(..., description="Item's selling price.")
    serialNumbers: str = Field(
        ...,
        description='This field identifies the order in the `handling` status in the workflow, and it was used for VTEX internal control.',
    )
    shippingPrice: str = Field(..., description="Item's shipping price.")
    tax: int = Field(..., description="Item's tax.")
    taxCode: str = Field(..., description=" Item's tax code.")
    uniqueId: str = Field(
        ...,
        description='Unique ID is an alphanumeric sequence that identifies an SKU in a given order.',
    )
    unitMultiplier: int = Field(..., description="Item's unit multiplier.")


class LogisticsInfo(BaseModel):
    addressId: str = Field(..., description='Address ID.')
    deliveryChannel: str = Field(
        ..., description='If the delivery channel is `delivery` or `pickup-in-point`.'
    )
    deliveryChannels: List[DeliveryChannel] = Field(
        ..., description='List of delivery channels associated with the trade policy.'
    )
    deliveryCompany: str = Field(
        ...,
        description="[Carrier](https://help.vtex.com/en/tutorial/transportadoras-na-vtex--7u9duMD5UQa2QQwukAWMcE) company's name.",
    )
    deliveryIds: List[DeliveryId] = Field(
        ..., description='Information about delivery IDs.'
    )
    deliveryWindow: str = Field(
        ...,
        description='[Scheduled delivery](https://help.vtex.com/tutorial/scheduled-delivery--22g3HAVCGLFiU7xugShOBi) window information, if it applies to the item.',
    )
    entityId: str = Field(..., description='Shipping address entity ID.')
    itemIndex: int = Field(..., description='Index of the item starting from 0.')
    listPrice: int = Field(
        ..., description="SKU's optional price for a specific trade policy."
    )
    lockTTL: str = Field(
        ...,
        description='Logistics [reservation](https://help.vtex.com/en/tutorial/how-does-reservation-work--tutorials_92) waiting time.',
    )
    pickupPointId: str = Field(
        ...,
        description="[Pickup point](https://help.vtex.com/en/tutorial/pickup-points--2fljn6wLjn8M4lJHA6HP3R)'s ID.",
    )
    pickupStoreInfo: PickupStoreInfo
    polygonName: str = Field(
        ...,
        description='Name of the [polygon](https://help.vtex.com/en/tutorial/registering-geolocation/) associated with the shipping policy.',
    )
    price: int = Field(
        ...,
        description="Shipping price for the item in cents. Does not account for the whole order's shipping price.",
    )
    selectedSla: str = Field(..., description='Selected shipping option.')
    sellingPrice: int = Field(..., description="Item's selling price.")
    shippingEstimate: str = Field(
        ...,
        description='Total shipping estimate time in days. For instance, three business days is represented `3bd`.',
    )
    shippingEstimateDate: str = Field(
        ...,
        description='Shipping estimate date. It is defined only after the confirmation of the order.',
    )
    shipsTo: List[str] = Field(
        ...,
        description='Three letters ISO code of the country of the shipping address (ISO 3166 ALPHA-3).',
    )
    slas: List[Sla] = Field(
        ...,
        description='Information on Service Level Agreement (SLA), corresponding to [shipping policies](https://help.vtex.com/tutorial/shipping-policy--tutorials_140).',
    )
    transitTime: str = Field(
        ...,
        description='Duration in business days of the time the carrier takes in transit to fulfill the order. For example, three business days is represented `3bd`.',
    )
    versionId: str = Field(..., description='Shipping address version ID.')


class PaymentData(BaseModel):
    giftCards: Optional[List] = Field(
        None, description='Array with information about Gift Cards.'
    )
    transactions: List[Transaction] = Field(
        ..., description='Information about financial transactions.'
    )


class ShippingData(BaseModel):
    address: Address
    id: str = Field(..., description='Object ID, the expected value is `shippingData`.')
    logisticsInfo: List[LogisticsInfo] = Field(
        ..., description="Array of objects containing item's logistics information."
    )
    selectedAddresses: List[SelectedAddress] = Field(
        ..., description='Information about selected adresses.'
    )
    trackingHints: str


class Stats3(BaseModel):
    totalItems: TotalItems1
    totalValue: TotalValue1


class TotalItems(BaseModel):
    Count: int
    Facets: Facets1
    Max: int
    Mean: float
    Min: int
    Missing: int
    StdDev: float
    Sum: int
    SumOfSquares: int


class TotalValue(BaseModel):
    Count: int
    Facets_1: Facets = Field(..., alias='Facets')
    Max: int
    Mean: float
    Min: int
    Missing: int
    StdDev: float
    Sum: int
    SumOfSquares: int


class ApiOmsPvtOrdersOrderIdConversationMessageGetResponse(
    RootModel[List[GetConversation]]
):
    root: List[GetConversation]


class ChangesAttachment(BaseModel):
    changesData: List[ChangesDatum] = Field(..., description='Order change details.')
    id: str = Field(
        ..., description='Object ID, the expect value is `changeAttachment`.'
    )


class GetOrder(BaseModel):
    affiliateId: str
    allowCancellation: bool
    allowEdition: bool
    approvedBy: str
    authorizedDate: str
    callCenterOperatorData: str
    cancelReason: str = Field(..., description='Explanation for cancellation')
    cancelledBy: str = Field(..., description='User that canceled the order.')
    changesAttachment: ChangesAttachment
    clientProfileData: ClientProfileData
    commercialConditionData: str
    creationDate: str
    customData: str
    emailTracked: str
    followUpEmail: str
    giftRegistryData: str
    hostname: str
    invoiceData: Dict[str, Any] = Field(
        ..., description="Information pertinent to the order's invoice."
    )
    invoicedDate: str
    isCheckedIn: bool
    isCompleted: bool
    items: List[Item] = Field(..., description='')
    lastChange: str
    lastMessage: str
    marketingData: str
    marketplace: Marketplace
    marketplaceItems: List[str] = Field(..., description='')
    marketplaceOrderId: str
    marketplaceServicesEndpoint: str
    merchantName: str
    openTextField: str = Field(
        ...,
        description='This field must be filled in using the following format: \n\r```\n\r{\r\n    "fieldExample": "ValueExample"\r\n  }\n\r```\n\r',
    )
    orderFormId: str
    orderGroup: str
    orderId: str
    origin: str
    packageAttachment: PackageAttachment
    paymentData: PaymentData
    ratesAndBenefitsData: RatesAndBenefitsData
    roundingError: int
    salesChannel: str
    sellerOrderId: str
    sellers: List[Seller] = Field(..., description='')
    sequence: str
    shippingData: ShippingData
    status: str
    statusDescription: str = Field(
        ...,
        description='`Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.',
    )
    storePreferencesData: StorePreferencesData
    totals: List[Total] = Field(..., description='')
    value: int


class Stats1(BaseModel):
    totalItems: TotalItems
    totalValue: TotalValue


class Stats2(BaseModel):
    stats: Stats3


class Userorderdetails(BaseModel):
    affiliateId: str = Field(
        ...,
        description='Corresponds to the three-digit [affiliate](https://help.vtex.com/en/tutorial/configuring-affiliates--tutorials_187) identification code of the seller responsible for the order.',
    )
    allowCancellation: bool = Field(
        ...,
        description='When set as `true`, the order can be canceled, and when set as `false`, it is no longer possible to cancel the order.',
    )
    allowEdition: bool = Field(
        ...,
        description='When set as `true`, the order can be edited, and when set as `false`, it is no longer possible to edit the order.',
    )
    authorizedDate: str = Field(..., description='Authorized order date.')
    callCenterOperatorData: str = Field(
        ..., description='Call center operator responsible for the order.'
    )
    cancelReason: str = Field(..., description='Reason for order cancellation.')
    cancellationData: CancellationData = Field(
        ..., description='Information about order cancellation, when it applies.'
    )
    changesAttachment: ChangesAttachment
    checkedInPickupPointId: str = Field(
        ...,
        description='If the field `isCheckedIn` is set as `true`, the `checkedInPickupPointId` will retrieve the ID of the physical store where the order was made.',
    )
    clientPreferencesData: ClientPreferencesData = Field(
        ..., description="Information about customer's preferences."
    )
    clientProfileData: ClientProfileData
    commercialConditionData: str = Field(
        ..., description='Information about commercial conditions.'
    )
    creationDate: str = Field(..., description="Order's creation date.")
    customData: str = Field(
        ...,
        description='Custom information in the order. This field is useful for storing data not included in other fields, for example, a message for a gift or a name to be printed in a shirt.',
    )
    followUpEmail: str = Field(
        ...,
        description="Email of the store's employee responsible for managing the order.",
    )
    giftRegistryData: str = Field(
        ..., description='Information about gift list, when it applies.'
    )
    hostname: str = Field(
        ..., description='Account Hostname registered in License Manager.'
    )
    invoiceData: Dict[str, Any] = Field(
        ..., description="Information pertinent to the order's invoice."
    )
    invoicedDate: str = Field(..., description="Order's invoice date.")
    isCheckedIn: bool = Field(
        ...,
        description='This field is set `true` when the order was made via inStore and `false` when it was not.',
    )
    isCompleted: bool = Field(
        ...,
        description="When set as `true`, the order's payment has been settled, and when set as `false`, it has not been settled yet.",
    )
    itemMetadata: ItemMetadata = Field(
        ..., description="Metadata information about the order's items."
    )
    items: List[Item] = Field(..., description="Information about order's items.")
    lastChange: str = Field(..., description="Order's last change date.")
    lastMessage: str = Field(..., description='Last sent transactional message.')
    marketingData: MarketingData = Field(
        ...,
        description='Information about promotions and marketing. For example, coupon tracking information and internal or external UTMs.',
    )
    marketplace: Marketplace
    marketplaceItems: List[str] = Field(..., description='Marketplace details object.')
    marketplaceOrderId: str = Field(..., description='Marketplace order ID.')
    marketplaceServicesEndpoint: str = Field(
        ..., description='Marketplace services endpoint.'
    )
    merchantName: str = Field(..., description='Name of the merchant.')
    openTextField: str = Field(
        ...,
        description='Optional field with order\'s additional information. This field must be filled in using the following format: \n\r```\n\r{\r\n    "fieldExample": "ValueExample"\r\n  }\n\r```\n\r',
    )
    orderFormId: str = Field(
        ...,
        description='[Order form](https://developers.vtex.com/docs/guides/orderform-fields) ID. ',
    )
    orderGroup: str = Field(..., description="Order's group ID.")
    orderId: str = Field(
        ..., description='Order ID is a unique code that identifies an order.'
    )
    origin: str = Field(
        ..., description='Order Origin, if `Marketplace` or `Fulfillment`.'
    )
    packageAttachment: PackageAttachment
    paymentData: PaymentData
    ratesAndBenefitsData: RatesAndBenefitsData
    roundingError: int = Field(
        ...,
        description='Rounding error total amount, if it applies. For example, in orders with a discount over non-integer multiplier items, the rounding price is performed per item, not after the sum of all items. That can cause a difference in the total discount amount, which is informed in this field.',
    )
    salesChannel: str = Field(
        ...,
        description='Sales channel (or [trade policy](https://help.vtex.com/tutorial/how-trade-policies-work--6Xef8PZiFm40kg2STrMkMV)) ID related to the order.',
    )
    sellerOrderId: str = Field(
        ...,
        description='ID of the seller related to the order. It can be a VTEX seller or an external seller.',
    )
    sellers: List[Seller] = Field(
        ..., description='List of all sellers associated with the order.'
    )
    sequence: str = Field(
        ...,
        description='Sequence is a six-digit string that follows the order ID. For example, in order `1268540501456-01 (501456)`, the sequence is `501456`.',
    )
    shippingData: ShippingData
    status: str = Field(
        ...,
        description='Order [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196).',
    )
    statusDescription: str = Field(
        ...,
        description='`Deprecated`. Status description which is displayed on the Admin panel. This field is obsolete and may not return any value.',
    )
    storePreferencesData: StorePreferencesData
    subscriptionData: SubscriptionData = Field(
        ...,
        description='Information about [subscriptions](https://help.vtex.com/tutorial/how-subscriptions-work--frequentlyAskedQuestions_4453).',
    )
    taxData: TaxData = Field(..., description="Order's tax information.")
    totals: List[Total] = Field(
        ..., description="List with details about orders' totals."
    )
    value: int = Field(..., description="Order's total amount.")


class Userorderslist(BaseModel):
    facets: List[str] = Field(..., description='')
    list: List[List1] = Field(..., description="List with user's orders details.")
    paging: Paging
    stats: Stats2


class ApiOmsPvtOrdersOrderIdGetResponse(BaseModel):
    affiliateId: Optional[str] = Field(
        None,
        description='Three letter code identifying the marketplace where the order was placed.',
    )
    allowCancellation: Optional[bool] = Field(
        None, description='Indicates whether cancelation is allowed for the order.'
    )
    allowEdition: Optional[bool] = Field(
        None, description='Indicates whether edition is allowed for the order.'
    )
    approvedBy: Optional[str] = Field(
        None, description='User that approved the order, in case of manual approval.'
    )
    authorizedDate: Optional[str] = Field(
        None, description='Date in which the order was authorized in UTC.'
    )
    callCenterOperatorData: Optional[str] = None
    cancelReason: Optional[str] = Field(None, description='Reason for cancelation.')
    cancelledBy: Optional[str] = Field(
        None, description='User that canceled the order.'
    )
    changesAttachment: Optional[ChangesAttachment] = None
    clientProfileData: Optional[ClientProfileData] = None
    commercialConditionData: Optional[str] = None
    creationDate: Optional[str] = Field(None, description='Creation date.')
    customData: Optional[str] = None
    emailTracked: Optional[str] = Field(None, description='Email tracked.')
    followUpEmail: Optional[str] = None
    giftRegistryData: Optional[str] = None
    hostname: Optional[str] = None
    invoiceData: Optional[Dict[str, Any]] = Field(
        None, description="Information pertinent to the order's invoice."
    )
    invoicedDate: Optional[str] = Field(
        None, description='Date in which the order was invoiced in UTC.'
    )
    isCheckedIn: Optional[bool] = Field(
        None, description='Indicates whether client is checked in.'
    )
    isCompleted: Optional[bool] = None
    items: Optional[List[Item4]] = Field(
        None, description='Information on each item in the order.'
    )
    lastChange: Optional[str] = Field(None, description='Date of last change.')
    lastMessage: Optional[str] = None
    marketingData: Optional[str] = None
    marketplace: Optional[Marketplace] = None
    marketplaceItems: Optional[List[str]] = Field(
        None, description='Marketplace items.'
    )
    marketplaceOrderId: Optional[str] = Field(
        None, description='ID of the order in the marketplace.'
    )
    marketplaceServicesEndpoint: Optional[str] = Field(
        None, description='Marketplace endpoint for post purchase communication.'
    )
    merchantName: Optional[str] = Field(None, description='Merchant name.')
    openTextField: Optional[str] = None
    orderFormId: Optional[str] = None
    orderGroup: Optional[str] = Field(None, description='Order group.')
    orderId: Optional[str] = Field(None, description='Order ID.')
    origin: Optional[str] = Field(None, description='Origin.')
    packageAttachment: Optional[PackageAttachment1] = Field(
        None, description='Package attachment.', examples=[{'packages': []}]
    )
    paymentData: Optional[PaymentData] = None
    ratesAndBenefitsData: Optional[RatesAndBenefitsData] = None
    roundingError: Optional[int] = None
    salesChannel: Optional[str] = Field(None, description='Sales channel.')
    sellerOrderId: Optional[str] = Field(None, description='Seller order ID.')
    sellers: Optional[List[Seller]] = Field(None, description='')
    sequence: Optional[str] = Field(None, description='Sequence number.')
    shippingData: Optional[ShippingData] = None
    status: Optional[str] = Field(None, description='Status in the order workflow.')
    statusDescription: Optional[str] = Field(
        None,
        description='`Deprecated`. Status description which is displayed on the Admin panel.',
    )
    storePreferencesData: Optional[StorePreferencesData] = None
    totals: Optional[List[Total1]] = Field(
        None, description="Information on each of the order's totals."
    )
    value: Optional[int] = Field(None, description='Value in cents.')


class Stats(BaseModel):
    stats: Stats1


class ListOrders(BaseModel):
    facets: List[str] = Field(..., description='')
    list: List[ListModel] = Field(..., description='')
    paging: Paging
    stats: Stats
