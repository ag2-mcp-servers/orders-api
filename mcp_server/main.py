# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:00:23+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query

from models import (
    AddLogRequest,
    ApiCheckoutPvtConfigurationWindowToChangeSellerPostRequest,
    ApiOmsPvtAdminReportsCompletedGetResponse,
    ApiOmsPvtAdminReportsInprogressGetResponse,
    ApiOmsPvtOrdersOrderIdCancelPostRequest,
    ApiOmsPvtOrdersOrderIdCancelPostResponse,
    ApiOmsPvtOrdersOrderIdConversationMessageGetResponse,
    ApiOmsPvtOrdersOrderIdGetResponse,
    ApiOmsPvtOrdersOrderIdInvoicePostResponse,
    ApiOmsPvtOrdersOrderIdStartHandlingPostResponse,
    ApiOmsPvtOrdersOrderIdStartHandlingPostResponse1,
    ApiOrdersFeedConfigGetResponse,
    ApiOrdersFeedGetResponse,
    ApiOrdersFeedPostResponse,
    CommititemfeedorderstatusRequest,
    FeedConfigurationRequest,
    GetPaymenttransaction,
    HookConfiguration,
    HookConfigurationRequest,
    InvoiceNotificationRequest,
    ListOrders,
    RegisterChange,
    RegisterChangeRequest,
    TestJSONataExpression,
    UpdatepartialinvoiceSendTrackingNumber,
    UpdatepartialinvoiceSendTrackingNumberRequest,
    UpdateTrackingStatus,
    UpdateTrackingStatusRequest,
    Userorderdetails,
    Userorderslist,
)

app = MCPProxy(
    contact={},
    description="\r\n\r\n>Check the new [Orders onboarding guide](https://developers.vtex.com/docs/guides/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.\r\n\r\nReceive, process, and manage every order in your store through our Order Management API.",
    title='Orders API',
    version='1.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server URL.',
            'url': 'https://{accountName}.{environment}.com.br',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL.',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.get(
    '/api/checkout/pvt/configuration/window-to-change-seller',
    description=""" Retrieves a marketplaceâ€™s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.


The default period for this window is of 2 days, but it can be configured by the request Update window to change seller. """,
    tags=['seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_window_to_change_seller(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get window to change seller
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/checkout/pvt/configuration/window-to-change-seller',
    description=""" Updates a marketplaceâ€™s window to change seller, that is, the period when it is possible to choose another seller to fulfill a given order after the original seller has canceled it.


It is possible to check the current window using the request Get window to change seller. """,
    tags=['order_processing', 'seller_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_window_to_change_seller(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: ApiCheckoutPvtConfigurationWindowToChangeSellerPostRequest = ...,
):
    """
    Update window to change seller
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oms/pvt/admin/reports/completed',
    description=""" Retrieves a list of all order reports that are `completed`, by `accountName`. Be aware that the scope of the export log is per user. 

> This endpoint is for VTEX internal use, and it is not meant to be used by clients. """,
    tags=['order_reporting', 'order_processing'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def status_completed(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Export order report with status 'Completed'
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oms/pvt/admin/reports/inprogress',
    description=""" Retrieves a list of all order reports that are `in progress`, by `accountName`. Be aware that the scope of the export log is per user. 

> This endpoint is for VTEX internal use, and it is not meant to be used by clients. """,
    tags=['order_reporting', 'order_processing'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def status_in_progress(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Export order report with status 'In Progress'
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oms/pvt/feed/orders/status',
    description=""" Get feed order status (deprecated) """,
    tags=['order_processing', 'order_reporting', 'user_specific_order_access'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getfeedorderstatus(
    max_lot: str = Query(..., alias='maxLot'),
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Get feed order status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oms/pvt/orders',
    description=""" Retrieves a list of orders according to the filters described below. 

The limit of information retrieval is 30 pages, the default number of orders per page is 15 and it is possible to configure it up to 100 using the  `per_page` parameter. 

 Be aware that as of October 3rd, 2018, this endpoint will not return the `items` property. 


> This should **not** be used for integrations. Use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed) for this purpose.


This endpoint returns only orders that already have been indexed, which takes approximately four minutes. Because of this, the data retrieved may present inconsistencies. To get live up-to-date information and [build order integrations](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration) use the [orders Feed or hook](https://developers.vtex.com/docs/guides/orders-feed).

> ðŸ“˜ Onboarding guide 
>
> Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.

 """,
    tags=['order_processing', 'user_specific_order_access'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def list_orders(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    order_by: Optional[str] = Query('v502556llux-01,asc', alias='orderBy'),
    page: Optional[int] = 10,
    per_page: Optional[int] = 15,
    f_creation_date: str = Query(..., alias='f_creationDate'),
    f_has_input_invoice: Optional[bool] = Query(False, alias='f_hasInputInvoice'),
    q: Optional[
        str
    ] = '- OrderID: v212333lux-02 \r\n- Client email: taylor@email.com \r\n- Client document: 21133355524 \r\n- Client name: Taylor',
    utc: Optional[int] = -2000,
    f_shipping_estimate: Optional[str] = Query('0.days', alias='f_shippingEstimate'),
    f_invoiced_date: Optional[str] = Query(
        'invoicedDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]',
        alias='f_invoicedDate',
    ),
    f_authorized_date: Optional[str] = Query(
        'creationDate:[2022-01-01T02:00:00.000Z TO 2022-01-02T01:59:59.999Z]',
        alias='f_authorizedDate',
    ),
    f__utm_source: Optional[str] = Query('christmas_campaign', alias='f_UtmSource'),
    f_seller_names: Optional[str] = Query('SellerName', alias='f_sellerNames'),
    f_call_center_operator_name: Optional[str] = Query(
        'Operator%20Name', alias='f_callCenterOperatorName'
    ),
    f_sales_channel: Optional[str] = Query('Main', alias='f_salesChannel'),
    sales_channel_id: Optional[str] = Query('1', alias='salesChannelId'),
    f_affiliate_id: Optional[str] = Query('WLM', alias='f_affiliateId'),
    f_status: Optional[str] = 'ready-for-handling',
    incomplete_orders: Optional[bool] = Query(True, alias='incompleteOrders'),
    f_payment_names: Optional[str] = Query('Visa', alias='f_paymentNames'),
    f__rn_b: Optional[str] = Query('Free+Shipping', alias='f_RnB'),
    search_field: Optional[str] = Query(
        "\r\n- SKU ID: `25` \r\n- Gift List ID: `11223` \r\n- Transaction ID (TID): `54546300238810034995829230012` \r\n- PCI Connector's Transaction ID (TID): `7032909234899834298423209` \r\n- Payment ID (PID): `2` \r\n- Connector's NSU: `2437281`",
        alias='searchField',
    ),
    f_is_instore: Optional[bool] = Query(True, alias='f_isInstore'),
):
    """
    List orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oms/pvt/orders/{orderId}',
    description=""" This endpoint retrieves order details by searching a specific order ID or sequence number.


> The `View order` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc).

> ðŸ“˜ Onboarding guide 
>
> Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.

## Response body example

```json
{
    "orderId": "1244730712239-01",
    "sequence": "502790",
    "marketplaceOrderId": "",
    "marketplaceServicesEndpoint": null,
    "sellerOrderId": "SLR-1244730712239-01",
    "origin": "Marketplace",
    "affiliateId": "",
    "salesChannel": "1",
    "merchantName": null,
    "status": "payment-approved",
    "statusDescription": "Pagamento Aprovado",
    "value": 2012,
    "creationDate": "2022-07-06T09:11:51.4597231+00:00",
    "lastChange": "2022-07-06T09:12:00.2849749+00:00",
    "orderGroup": "1244730712239",
    "totals": [
        {
            "id": "Items",
            "name": "Total dos Itens",
            "value": 2265
        },
        {
            "id": "Discounts",
            "name": "Total dos Descontos",
            "value": -453
        },
        {
            "id": "Shipping",
            "name": "Total do Frete",
            "value": 200
        },
        {
            "id": "Tax",
            "name": "Total da Taxa",
            "value": 0
        }
    ],
    "items": [
        {
            "uniqueId": "A14AD652AC5D40FBB0137D3ADA3CB800",
            "id": "12",
            "productId": "8",
            "ean": null,
            "lockId": null,
            "itemAttachment": {
                "content": {},
                "name": null
            },
            "attachments": [],
            "quantity": 1,
            "seller": "ppxpssp",
            "name": "Camiseta P Azul",
            "refId": "COP01_P-A",
            "price": 2265,
            "listPrice": 2265,
            "manualPrice": null,
            "priceTags": [
                {
                    "name": "discount@price-d0231eb3-e9a4-47b2-9c74-bc346df11ce4#e9bb430d-30b3-4461-a86e-f66f35b2915d",
                    "value": -453,
                    "isPercentual": false,
                    "identifier": "d0231eb3-e9a4-47b2-9c74-bc346df11ce4",
                    "rawValue": -4.53,
                    "rate": null,
                    "jurisCode": null,
                    "jurisType": null,
                    "jurisName": null
                }
            ],
            "imageUrl": "https://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v=637559269453730000",
            "detailUrl": "/camiseta/p",
            "components": [],
            "bundleItems": [],
            "params": [],
            "offerings": [],
            "sellerSku": "12",
            "priceValidUntil": "2023-07-06T09:11:04.0000000+00:00",
            "commission": 0,
            "tax": 0,
            "preSaleDate": null,
            "additionalInfo": {
                "brandName": "Marca TOP",
                "brandId": "2000001",
                "categoriesIds": "/7/",
                "categories": [
                    {
                        "id": 7,
                        "name": "Roupas"
                    }
                ],
                "productClusterId": "",
                "commercialConditionId": "1",
                "dimension": {
                    "cubicweight": 1.0000,
                    "height": 6.0000,
                    "length": 10.0000,
                    "weight": 4.0000,
                    "width": 8.0000
                },
                "offeringInfo": null,
                "offeringType": null,
                "offeringTypeId": null
            },
            "measurementUnit": "un",
            "unitMultiplier": 1.0000,
            "sellingPrice": 1812,
            "isGift": false,
            "shippingPrice": null,
            "rewardValue": 0,
            "freightCommission": 0,
            "priceDefinition": {
                "sellingPrices": [
                    {
                        "value": 1812,
                        "quantity": 1
                    }
                ],
                "calculatedSellingPrice": 1812,
                "total": 1812
            },
            "taxCode": "1122",
            "parentItemIndex": null,
            "parentAssemblyBinding": null,
            "callCenterOperator": null,
            "serialNumbers": null,
            "assemblies": [],
            "costPrice": null
        }
    ],
    "marketplaceItems": [],
    "clientProfileData": {
        "id": "clientProfileData",
        "email": "0bf94cbf23ff410aaaf7c707dd8a808c@ct.vtex.com.br",
        "firstName": "Paulo",
        "lastName": "Filho",
        "documentType": "cpf",
        "document": "11156703794",
        "phone": "+5521971126360",
        "corporateName": null,
        "tradeName": null,
        "corporateDocument": null,
        "stateInscription": null,
        "corporatePhone": null,
        "isCorporate": false,
        "userProfileId": "ca0695a8-df34-4076-8663-725041930c75",
        "customerClass": null
    },
    "giftRegistryData": null,
    "marketingData": {
        "id": "marketingData",
        "utmSource": null,
        "utmPartner": null,
        "utmMedium": null,
        "utmCampaign": null,
        "coupon": null,
        "utmiCampaign": null,
        "utmipage": null,
        "utmiPart": null,
        "marketingTags": [
            "vtex-subscription"
        ]
    },
    "ratesAndBenefitsData": {
        "id": "ratesAndBenefitsData",
        "rateAndBenefitsIdentifiers": [
            {
                "description": "Desconto de 20% no pedido para assinatura",
                "featured": true,
                "id": "d0231eb3-e9a4-47b2-9c74-bc346df11ce4",
                "name": "Desconto 20% assinante",
                "matchedParameters": {},
                "additionalInfo": null
            }
        ]
    },
    "shippingData": {
        "id": "shippingData",
        "address": {
            "addressType": "residential",
            "receiverName": "Paulo Filho",
            "addressId": "1651158093975",
            "postalCode": "21341-270",
            "city": "Rio de Janeiro",
            "state": "RJ",
            "country": "BRA",
            "street": "Rua Pinto Teles",
            "number": "1",
            "neighborhood": "PraÃ§a Seca",
            "complement": null,
            "reference": null,
            "geoCoordinates": [
                -43.350608825683594,
                -22.886520385742188
            ]
        },
        "logisticsInfo": [
            {
                "itemIndex": 0,
                "selectedSla": "Normal",
                "lockTTL": "12d",
                "price": 200,
                "listPrice": 200,
                "sellingPrice": 200,
                "deliveryWindow": null,
                "deliveryCompany": "Transportadora",
                "shippingEstimate": "2bd",
                "shippingEstimateDate": "2022-07-08T09:11:57.8421126+00:00",
                "slas": [
                    {
                        "id": "Normal",
                        "name": "Normal",
                        "shippingEstimate": "2bd",
                        "deliveryWindow": null,
                        "price": 200,
                        "deliveryChannel": "delivery",
                        "pickupStoreInfo": {
                            "additionalInfo": null,
                            "address": null,
                            "dockId": null,
                            "friendlyName": null,
                            "isPickupStore": false
                        },
                        "polygonName": "",
                        "lockTTL": "12d",
                        "pickupPointId": null,
                        "transitTime": "2bd"
                    }
                ],
                "shipsTo": [
                    "BRA"
                ],
                "deliveryIds": [
                    {
                        "courierId": "1",
                        "courierName": "Transportadora",
                        "dockId": "169fe66",
                        "quantity": 1,
                        "warehouseId": "166cb0c",
                        "accountCarrierName": null
                    }
                ],
                "deliveryChannel": "delivery",
                "pickupStoreInfo": {
                    "additionalInfo": null,
                    "address": null,
                    "dockId": null,
                    "friendlyName": null,
                    "isPickupStore": false
                },
                "addressId": "1651158093975",
                "polygonName": "",
                "pickupPointId": null,
                "transitTime": "2bd"
            }
        ],
        "trackingHints": null,
        "selectedAddresses": [
            {
                "addressId": "1651158093975",
                "addressType": "residential",
                "receiverName": "Paulo Filho",
                "street": "Rua Pinto Teles",
                "number": "1",
                "complement": null,
                "neighborhood": "PraÃ§a Seca",
                "postalCode": "21341-270",
                "city": "Rio de Janeiro",
                "state": "RJ",
                "country": "BRA",
                "reference": null,
                "geoCoordinates": [
                    -43.350608825683594,
                    -22.886520385742188
                ]
            }
        ]
    },
    "paymentData": {
        "giftCards": [],
        "transactions": [
            {
                "isActive": true,
                "transactionId": "A5BF0F884F314F788F4778B464EE1648",
                "merchantName": "PPXPS",
                "payments": [
                    {
                        "id": "06D8D76D4BD549EF9CC209D969ACBA84",
                        "paymentSystem": "47",
                        "paymentSystemName": "Cash",
                        "value": 2012,
                        "installments": 1,
                        "referenceValue": 2012,
                        "cardHolder": null,
                        "cardNumber": null,
                        "firstDigits": null,
                        "lastDigits": null,
                        "cvv2": null,
                        "expireMonth": null,
                        "expireYear": null,
                        "url": null,
                        "giftCardId": null,
                        "giftCardName": null,
                        "giftCardCaption": null,
                        "redemptionCode": null,
                        "group": "cash",
                        "tid": null,
                        "dueDate": null,
                        "connectorResponses": {},
                        "giftCardProvider": null,
                        "giftCardAsDiscount": null,
                        "koinUrl": null,
                        "accountId": null,
                        "parentAccountId": null,
                        "bankIssuedInvoiceIdentificationNumber": null,
                        "bankIssuedInvoiceIdentificationNumberFormatted": null,
                        "bankIssuedInvoiceBarCodeNumber": null,
                        "bankIssuedInvoiceBarCodeType": null,
                        "billingAddress": null
                    }
                ]
            }
        ]
    },
    "packageAttachment": {
        "packages": []
    },
    "sellers": [
        {
            "id": "ppxpssp",
            "name": "ppxpssp",
            "logo": "",
            "fulfillmentEndpoint": "http://fulfillment.vtexcommerce.com.br/api/fulfillment?an=ppxpssp&affiliateId=SLR&sc=1"
        }
    ],
    "callCenterOperatorData": null,
    "followUpEmail": "0a902f64ba1443c3b26ab5cb0b2aad9e@ct.vtex.com.br",
    "lastMessage": null,
    "hostname": "ppxps",
    "invoiceData": null,
    "changesAttachment": null,
    "openTextField": {
        "value": "Order Created By VTEX Subscription System"
    },
    "roundingError": 0,
    "orderFormId": "3d59650b4e9a447d80ecfac4830926d9",
    "commercialConditionData": null,
    "isCompleted": true,
    "customData": null,
    "storePreferencesData": {
        "countryCode": "BRA",
        "currencyCode": "BRL",
        "currencyFormatInfo": {
            "CurrencyDecimalDigits": 2,
            "CurrencyDecimalSeparator": ",",
            "CurrencyGroupSeparator": ".",
            "CurrencyGroupSize": 3,
            "StartsWithCurrencySymbol": true
        },
        "currencyLocale": 1046,
        "currencySymbol": "R$",
        "timeZone": "E. South America Standard Time"
    },
    "allowCancellation": true,
    "allowEdition": false,
    "isCheckedIn": false,
    "marketplace": null,
    "authorizedDate": "2022-07-06T09:11:56.0006230+00:00",
    "invoicedDate": null,
    "cancelReason": null,
    "itemMetadata": {
        "Items": [
            {
                "Id": "12",
                "Seller": "1",
                "Name": "Camiseta P Azul",
                "SkuName": "P Azul",
                "ProductId": "8",
                "RefId": "COP01_P-A",
                "Ean": null,
                "ImageUrl": "http://ppxps.vteximg.com.br/arquivos/ids/155407-55-55/EE803C74-37A5-4804-B1A6-9F12D22EA505.png?v=637559269453730000",
                "DetailUrl": "/camiseta/p",
                "AssemblyOptions": []
            }
        ]
    },
    "subscriptionData": {
        "SubscriptionGroupId": "C191822AF072C7508F9BBBC655FE8E60",
        "Subscriptions": [
            {
                "ExecutionCount": 274,
                "PriceAtSubscriptionDate": 2265.0,
                "ItemIndex": 0,
                "Plan": {
                    "type": "RECURRING_PAYMENT",
                    "frequency": {
                        "periodicity": "DAILY",
                        "interval": 1
                    },
                    "validity": {
                        "begin": "2021-10-05T00:00:00.0000000+00:00",
                        "end": null
                    }
                }
            }
        ]
    },
    "taxData": null,
    "checkedInPickupPointId": null,
    "cancellationData": null
}
``` """,
    tags=['order_processing', 'user_specific_order_access'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_order(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    order_id: str = Path(..., alias='orderId'),
):
    """
    Get order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/oms/pvt/orders/{orderId}/cancel',
    description=""" You should use this endpoint to cancel an order by its order identification number (the `orderId`).

A common scenario is one where the seller has a problem with the order fulfillment and needs to request the order cancellation to the marketplace. To do this, the seller would need to make this request, passing the `orderId` in the URL.

You should expect a response with the date when the notification was received, the orderId, and a receipt protocol code.

Be aware that if the order status is already `Invoiced`, the order can only be canceled ifâ€”before using this requestâ€”you send a return invoice through the [Order Invoice Notification endpoint](https://developers.vtex.com/reference/invoice#invoicenotification).


> The `Cancel order` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#). """,
    tags=['order_processing'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def cancel_order(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    order_id: str = Path(..., alias='orderId'),
    body: ApiOmsPvtOrdersOrderIdCancelPostRequest = None,
):
    """
    Cancel order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/oms/pvt/orders/{orderId}/changes',
    description=""" 
> Timeout settings
>
> This is a synchronous API, which means the application requests data and waits until a value is returned. This behavior can cause timeout errors; to avoid them, we recommend setting the timeout in 20 seconds.

 This request allows [changing an order](https://help.vtex.com/en/tutorial/changing-items-from-a-completed-order--tutorials_190) by:

- Adding items to an order

- Removing items from an order

- Applying discounts to the total value of the order

- Incrementing the total value of the order. 

In those scenarios of order changes, it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a partial invoice scenario. The updated value is settled by VTEX's Payment Gateway. The reimbursement for the shopper is automatic. 


This action can only be done for orders in these status:

- `handling`

- `waiting-for-fulfillment` 


> The `Change order` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#). """,
    tags=['order_processing'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def register_change(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    order_id: str = Path(..., alias='orderId'),
    body: RegisterChangeRequest = ...,
):
    """
    Register change on order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oms/pvt/orders/{orderId}/conversation-message',
    description=""" List all order conversations of an order by its order ID. """,
    tags=['order_processing', 'user_specific_order_access'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_conversation(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    order_id: str = Path(..., alias='orderId'),
    reason: Optional[str] = None,
):
    """
    Retrieve order conversation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/oms/pvt/orders/{orderId}/interactions',
    description=""" Add a Log in Interactions Order Array. """,
    tags=['order_processing', 'order_notification_logging'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def add_log(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    order_id: str = Path(..., alias='orderId'),
    body: AddLogRequest = ...,
):
    """
    Add log in orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/oms/pvt/orders/{orderId}/invoice',
    description=""" Entering the [invoice in the order](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/2WgQrlHTyVo4hLjhUs1LMT) is a required step for its [status](https://help.vtex.com/en/tutorial/order-flow-and-status--tutorials_196#order-status-details) to change to Invoiced - a sign that the order has been successfully completed. Remember that once an order is read as invoiced by the system, this status cannot be changed. 

The total value of the order will be updated after the insertion of the invoice, even when there's a [Partial invoice](https://help.vtex.com/en/tracks/orders--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX's Payment Gateway. The reimbursement for the shopper is automatic. 

We strongly recommend that you always send the object of the invoiced items. With this practice, rounding errors will be avoided. 

When returning items, an input invoice must be sent through this call. For that, the `type` field should be filled in with `input`. 

It is not allowed to use the same `invoiceNumber` in more than one request to the Order Invoice Notification endpoint.

For marketplace integrations: once the order is invoiced, the seller should use this request to send the invoice information to the marketplace. Be aware that this endpoint is also used by the seller to send the order tracking information. This, however, should be done in a separate moment, once the seller has the tracking information.  


> The `Notify invoice` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#).


> ðŸ“˜ Onboarding guide 
>
> Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.

 """,
    tags=['order_notification_logging', 'order_processing'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def invoice_notification(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    order_id: str = Path(..., alias='orderId'),
    body: InvoiceNotificationRequest = ...,
):
    """
    Order invoice notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/oms/pvt/orders/{orderId}/invoice/{invoiceNumber}',
    description=""" Update a given order, adding its tracking number to its [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe).


After using this call to add a tracking number to an order, you can use the [Update order tracking status](https://developers.vtex.com/vtex-rest-api/reference/tracking#updatetrackingstatus) API request to add tracking events.


> The `Notify invoice` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc). """,
    tags=['order_processing', 'order_tracking', 'order_notification_logging'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def updatepartialinvoice__send_tracking_number(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    order_id: str = Path(..., alias='orderId'),
    invoice_number: str = Path(..., alias='invoiceNumber'),
    body: UpdatepartialinvoiceSendTrackingNumberRequest = ...,
):
    """
    Update order's partial invoice (send tracking number)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/oms/pvt/orders/{orderId}/invoice/{invoiceNumber}/tracking',
    description=""" This endpoint sends a tracking event to an order that already has a tracking number registered to its invoice.


This request is not meant to send tracking number and URL to the invoice. If you wish to send tracking number and URL to an order, use the [Update order's partial invoice API request](https://developers.vtex.com/docs/api-reference/orders-api#patch-/api/oms/pvt/orders/-orderId-/invoice/-invoiceNumber-). You can also learn more about [Partial invoice](https://help.vtex.com/en/tracks/partial-invoices--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenarios. 


> The `Notify invoice` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc). """,
    tags=['order_processing', 'order_tracking'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def update_tracking_status(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    order_id: str = Path(..., alias='orderId'),
    invoice_number: str = Path(..., alias='invoiceNumber'),
    body: UpdateTrackingStatusRequest = ...,
):
    """
    Update order tracking status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oms/pvt/orders/{orderId}/payment-transaction',
    description=""" Retrieves transaction details by order ID. All events in the transaction will be registered in this call's response body. 

In scenarios of [order changes](https://developers.vtex.com/vtex-rest-api/reference/registerchange), it is possible to insert a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe). The total value of the order will be updated after the insertion of the invoice, even when there is a [Partial invoice](https://help.vtex.com/en/tracks/pedidos--2xkTisx4SXOWXQel8Jg8sa/q9GPspTb9cHlMeAZfdEUe) scenario. The updated value is settled by VTEX's Payment Gateway. The reimbursement for the shopper is automatic. """,
    tags=['payment_transaction_management', 'order_processing'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_paymenttransaction(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    order_id: str = Path(..., alias='orderId'),
):
    """
    Retrieve payment transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/oms/pvt/orders/{orderId}/payments/{paymentId}/payment-notification',
    description=""" Send a payment notification of a given order, by order ID.


> The `Notify payment` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#). """,
    tags=['order_notification_logging', 'payment_transaction_management'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def send_payment_notification(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    order_id: str = Path(..., alias='orderId'),
    payment_id: str = Path(..., alias='paymentId'),
):
    """
    Send payment notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/oms/pvt/orders/{orderId}/start-handling',
    description=""" Changes the status of an order to indicate that it is in `handling`.


> Expect a `status 204` response with no content in case of a successful request. The store must validate this response to retry the call if the response differs from the `204` code, making this flow the store's responsibility. This endpoint can also respond with `status 500`. 


> The `Change order workflow status` resource is needed to use this API request. This is included in `OMS - Full access` and `IntegrationProfile - Fulfillment Oms`, among other default roles available in the Admin. Learn more about the [License manager roles and resources](https://help.vtex.com/en/tutorial/roles--7HKK5Uau2H6wxE1rH5oRbc#). """,
    tags=['order_processing', 'order_notification_logging'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def start_handling(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    order_id: str = Path(..., alias='orderId'),
):
    """
    Start handling order
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oms/user/orders',
    description=""" Lists all orders from a given client, filtering by their email. 

> Note that these requests are meant to be made by **Call center operator** profiles. Otherwise, they will return only orders from the same email making the request. """,
    tags=['order_processing', 'user_specific_order_access'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def userorderslist(
    client_email: str = Query(..., alias='clientEmail'),
    page: str = ...,
    per_page: str = ...,
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Retrieve user's orders
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/oms/user/orders/{orderId}',
    description=""" Lists all details from a user's order, through client's perspective. 

> Note that these requests are meant to be made by **Call center operator** profiles. Otherwise, they will return only orders from the same email making the request. """,
    tags=['order_processing', 'user_specific_order_access'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def userorderdetails(
    client_email: str = Query(..., alias='clientEmail'),
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    order_id: str = Path(..., alias='orderId'),
):
    """
    Retrieve user order details
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/orders/expressions/jsonata',
    description=""" This endpoint allows you to test a JSON document with a JSONata expression, returning `true` if the document meets the criteria posed in the expression, or `false` if it does not.


Since JSONata expressions can be used to filter order updates in the [Orders API feed and hook](https://developers.vtex.com/docs/guides/orders-feed), this endpoint can be used to test an expression's results before configuring the [feed or hook](https://developers.vtex.com/docs/guides/orders-feed).


Learn more about how to use JSONata expressions, in the [JSONata documentation](https://docs.jsonata.org/overview.html). """,
    tags=['jsonata_expression_testing'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def test_j_s_o_nata_expression(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: TestJSONataExpression = None,
):
    """
    Test JSONata expression
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/orders/feed',
    description=""" Retrieve items from [feed](https://developers.vtex.com/docs/guides/orders-feed) queue. 

The event will be removed if the message `send retry` is equal to, or greater than the maximum retention period.

> This API will return `404 Not Found` if there is no [Feed Configuration](https://developers.vtex.com/docs/guides/orders-feed) available for the given X-VTEX-API-AppKey. """,
    tags=['feed_configuration_handling', 'user_specific_order_access'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def getfeedorderstatus1(
    maxlot: str = '{{maxLot}}',
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Retrieve feed items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/orders/feed',
    description=""" Commit items in the [feed](https://developers.vtex.com/docs/guides/orders-feed) queue. """,
    tags=['order_processing', 'feed_configuration_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def commititemfeedorderstatus(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: CommititemfeedorderstatusRequest = ...,
):
    """
    Commit feed items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/orders/feed/config',
    description=""" Deletes the configuration set up in [Feed v3](https://developers.vtex.com/docs/guides/orders-feed). """,
    tags=['feed_configuration_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def feed_configuration_delete(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Delete feed configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/orders/feed/config',
    description=""" The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration).

> ðŸ“˜ Onboarding guide 
>
> Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.

 """,
    tags=['feed_configuration_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_feed_configuration(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get feed configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/orders/feed/config',
    description=""" The Orders Feed v3 is the best way to create order integrations. Below you can find details on the configuration API specification, and to know more see our [Feed v3 guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed) and our [order integration guide](https://developers.vtex.com/vtex-rest-api/docs/erp-integration-set-up-order-integration)


There are two types of filtering that can be used. The `FromWorkflow` type filters orders by status, whereas the `FromOrders` type uses JSONata expressions to filter orders according to any property in the orders JSON document. This enables stores to filter delivered orders and orders in which products have been added or removed, for example. To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [Test JSONata expression](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata) endpoint. """,
    tags=['feed_configuration_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def feed_configuration(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
    body: FeedConfigurationRequest = ...,
):
    """
    Create or update feed configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/orders/hook/config',
    description=""" Deletes a given hook configuration.


Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook). """,
    tags=['hook_management', 'feed_configuration_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def delete_hook_configuration(
    accept: str = Header(..., alias='Accept'),
    content__type: str = Header(..., alias='Content-Type'),
):
    """
    Delete hook configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/orders/hook/config',
    description=""" Retrieves a given hook's configuration details. Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook). 

> ðŸ“˜ Onboarding guide 
>
> Check the new [Orders onboarding guide](https://developers.vtex.com/vtex-rest-api/docs/orders-overview). We created this guide to improve the onboarding experience for developers at VTEX. It assembles all documentation on our Developer Portal about Orders and is organized by focusing on the developer's journey.

 """,
    tags=['hook_management', 'feed_configuration_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def get_hook_configuration(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    client_email: Optional[str] = Query(None, alias='clientEmail'),
    page: Optional[str] = None,
    per_page: Optional[str] = None,
):
    """
    Get hook configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/orders/hook/config',
    description=""" Configures filtering rules applied to orders hook. Learn more with the [orders hook guide](https://developers.vtex.com/vtex-rest-api/docs/orders-feed#hook).


There are two types of filtering that can be used: 


 - `FromWorkflow`: filters orders by status.


 - `FromOrders`: uses JSONata expressions to filter orders according to any property in the orders JSON document.


 This enables stores to filter delivered orders and orders in which products have been added or removed, for example.


To learn more, access the [JSONata documentation](https://docs.jsonata.org/overview.html) and test filtering JSONata expressions with our [expressions API](https://developers.vtex.com/docs/api-reference/orders-api#post-/api/orders/expressions/jsonata). """,
    tags=['hook_management', 'feed_configuration_handling'],
    security=[
        APIKeyHeader(name="X-VTEX-API-AppKey"),
        APIKeyHeader(name="X-VTEX-API-AppToken"),
    ],
)
def hook_configuration(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: HookConfigurationRequest = ...,
):
    """
    Create or update hook configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
